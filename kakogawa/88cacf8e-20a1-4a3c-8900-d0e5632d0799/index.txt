1:"$Sreact.fragment"
2:I[8708,["315","static/chunks/315-19ca0205aa2fdd55.js","458","static/chunks/458-4db2abcd82f4c9c6.js","124","static/chunks/124-8b6d8ff5759d10e8.js","893","static/chunks/893-b9a66611845054ef.js","177","static/chunks/app/layout-95b7119291bad279.js"],"Provider"]
3:I[87555,[],""]
4:I[31295,[],""]
5:I[32176,["315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","335","static/chunks/app/%5Bslug%5D/error-a802457068253cdc.js"],"default"]
6:I[6874,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],""]
7:I[38567,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Button"]
9:I[59665,[],"OutletBoundary"]
c:I[59665,[],"ViewportBoundary"]
e:I[59665,[],"MetadataBoundary"]
10:I[26614,[],""]
:HL["/_next/static/css/a63443551c7d7d9f.css","style"]
0:{"P":null,"b":"j0Rvf7_7JpvGCh_Rag0QD","p":"","c":["","88cacf8e-20a1-4a3c-8900-d0e5632d0799",""],"i":false,"f":[[["",{"children":[["slug","88cacf8e-20a1-4a3c-8900-d0e5632d0799","d"],{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a63443551c7d7d9f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"suppressHydrationWarning":true,"lang":"ja","children":[["$","head",null,{"children":[["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}],["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=BIZ+UDPGothic&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"icon","href":"/meta/icon.png","sizes":"any"}],false]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}],{"children":[["slug","88cacf8e-20a1-4a3c-8900-d0e5632d0799","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$5","errorStyles":[],"errorScripts":[],"template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","p",null,{"children":"ページが見つかりませんでした"}],["$","$L6",null,{"href":"/","children":["$","$L7",null,{"children":"トップに戻る"}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8","$undefined",null,["$","$L9",null,{"children":["$La","$Lb",null]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","MXcVxNOEoBsjf7WD3WxUF",{"children":[["$","$Lc",null,{"children":"$Ld"}],null]}],["$","$Le",null,{"children":"$Lf"}]]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
11:I[73811,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Header"]
12:I[81068,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Box"]
13:I[17921,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Heading"]
14:I[90310,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Text"]
15:I[7684,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Icon"]
16:I[4618,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"ClientContainer"]
22:I[91925,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Analysis"]
23:I[91548,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Separator"]
25:I[18607,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Footer"]
17:T190e,import concurrent.futures
import json
import logging
import re

import pandas as pd
from pydantic import BaseModel, Field
from tqdm import tqdm

from services.llm import request_to_chat_ai
from services.parse_json_list import parse_extraction_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


class ExtractionResponse(BaseModel):
    extractedOpinionList: list[str] = Field(..., description="抽出した意見のリスト")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    if "provider" not in config:
        raise RuntimeError("provider is not set")
    provider = config["provider"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(
            batch_inputs, prompt, model, workers, provider, config.get("local_llm_address"), config
        )

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument = arg
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": argument,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers, provider="openai", local_llm_address=None, config=None):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model, provider, local_llm_address))
            for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]
        total_token_input = 0
        total_token_output = 0
        total_token_usage = 0

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    if isinstance(result, tuple) and len(result) == 4:
                        items, token_input, token_output, token_total = result
                        results[i] = items
                        total_token_input += token_input
                        total_token_output += token_output
                        total_token_usage += token_total
                    else:
                        results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []

        if config is not None:
            config["total_token_usage"] = config.get("total_token_usage", 0) + total_token_usage
            config["token_usage_input"] = config.get("token_usage_input", 0) + total_token_input
            config["token_usage_output"] = config.get("token_usage_output", 0) + total_token_output
            print(
                f"Extraction batch: input={total_token_input}, output={total_token_output}, total={total_token_usage} tokens"
            )

        return results


def extract_arguments(input, prompt, model, provider="openai", local_llm_address=None):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=model,
            is_json=False,
            json_schema=ExtractionResponse,
            provider=provider,
            local_llm_address=local_llm_address,
        )
        items = parse_extraction_response(response)
        items = list(filter(None, items))  # omit empty strings
        return items, token_input, token_output, token_total
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
18:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
19:T1bf8,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd
from pydantic import BaseModel, Field

from services.llm import request_to_chat_ai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
            - provider: LLMプロバイダー
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    # トークン使用量を追跡するための変数を初期化
    config["total_token_usage"] = config.get("total_token_usage", 0)

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
        config["provider"],
        config.get("local_llm_address"),
        config,  # configを渡して、トークン使用量を累積できるようにする
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
    provider: str = "openai",
    local_llm_address: str | None = None,
    config: dict | None = None,  # configを追加
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数
        provider: LLMプロバイダー
        local_llm_address: ローカルLLMのアドレス
        config: 設定情報を含む辞書（トークン使用量の累積に使用）

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
        provider=provider,
        local_llm_address=local_llm_address,
        config=config,  # configを渡す
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


class LabellingFromat(BaseModel):
    """ラベリング結果のフォーマットを定義する"""

    label: str = Field(..., description="クラスタのラベル名")
    description: str = Field(..., description="クラスタの説明文")


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
    provider: str = "openai",
    local_llm_address: str | None = None,
    config: dict | None = None,  # configを追加
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名
        provider: LLMプロバイダー
        local_llm_address: ローカルLLMのアドレス
        config: 設定情報を含む辞書（トークン使用量の累積に使用）

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response_text, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=model,
            provider=provider,
            json_schema=LabellingFromat,
            local_llm_address=local_llm_address,
        )

        # トークン使用量を累積（configが渡されている場合）
        if config is not None:
            config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
            config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
            config["token_usage_output"] = config.get("token_usage_output", 0) + token_output

        response_json = json.loads(response_text) if isinstance(response_text, str) else response_text
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
1a:T333d,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from pydantic import BaseModel, Field
from tqdm import tqdm

from services.llm import request_to_chat_ai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
            - provider: LLMプロバイダー
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


class LabellingFromat(BaseModel):
    """ラベリング結果のフォーマットを定義する"""

    label: str = Field(..., description="クラスタのラベル名")
    description: str = Field(..., description="クラスタの説明文")


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response_text, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            json_schema=LabellingFromat,
            provider=config["provider"],
            local_llm_address=config.get("local_llm_address"),
        )

        config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
        config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
        config["token_usage_output"] = config.get("token_usage_output", 0) + token_output
        print(f"Merge labelling: input={token_input}, output={token_output}, total={token_total} tokens")

        response_json = json.loads(response_text) if isinstance(response_text, str) else response_text
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
1b:Ta48,"""Create summaries for the clusters."""

import json
import re

import pandas as pd
from pydantic import BaseModel, Field

from services.llm import request_to_chat_ai


class OverviewResponse(BaseModel):
    summary: str = Field(..., description="クラスターの全体的な要約")


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input_text = ""
    for i, _ in enumerate(ids):
        input_text += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input_text += descriptions[i] + "\n\n"

    messages = [{"role": "system", "content": prompt}, {"role": "user", "content": input_text}]
    response_text, token_input, token_output, token_total = request_to_chat_ai(
        messages=messages,
        model=model,
        provider=config["provider"],
        local_llm_address=config.get("local_llm_address"),
        json_schema=OverviewResponse,
    )

    # トークン使用量を累積
    config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
    config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
    config["token_usage_output"] = config.get("token_usage_output", 0) + token_output
    print(f"Hierarchical overview: input={token_input}, output={token_output}, total={token_total} tokens")

    try:
        # structured outputとしてパースできるなら処理する
        if isinstance(response_text, dict):
            parsed_response = response_text
        else:
            parsed_response = json.loads(response_text)

        with open(path, "w") as file:
            file.write(parsed_response["summary"])

    except Exception:
        # thinkタグが出力されるReasoningモデル用に、thinkタグを除去する
        thinking_removed = re.sub(
            r"<think\b[^>]*>.*?</think>",
            "",
            response_text,
            flags=re.DOTALL,
        )

        with open(path, "w") as file:
            file.write(thinking_removed)
1c:T3f38,"""Generate a convenient JSON output file."""

import json
from collections import defaultdict
from pathlib import Path
from typing import Any, TypedDict

import numpy as np
import pandas as pd

ROOT_DIR = Path(__file__).parent.parent.parent.parent
CONFIG_DIR = ROOT_DIR / "scatter" / "pipeline" / "configs"
PIPELINE_DIR = ROOT_DIR / "broadlistening" / "pipeline"


def json_serialize_numpy(obj: Any) -> Any:
    """
    Recursively convert NumPy data types to native Python types for JSON serialization.

    Args:
        obj: Any Python object which might contain NumPy data types

    Returns:
        The same object structure with NumPy types converted to Python native types
    """
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, dict):
        return {k: json_serialize_numpy(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [json_serialize_numpy(item) for item in obj]
    elif isinstance(obj, tuple):
        return tuple(json_serialize_numpy(item) for item in obj)
    else:
        return obj


class Argument(TypedDict):
    arg_id: str
    argument: str
    comment_id: str
    x: float
    y: float
    p: float
    cluster_ids: list[str]
    attributes: dict[str, str] | None
    url: str | None


class Cluster(TypedDict):
    level: int
    id: str
    label: str
    takeaway: str
    value: int
    parent: str
    density_rank_percentile: float | None


def hierarchical_aggregation(config) -> bool:
    try:
        path = f"outputs/{config['output_dir']}/hierarchical_result.json"
        results = {
            "arguments": [],
            "clusters": [],
            "comments": {},
            "propertyMap": {},
            "translations": {},
            "overview": "",
            "config": config,
        }

        arguments = pd.read_csv(f"outputs/{config['output_dir']}/args.csv")
        arguments.set_index("arg-id", inplace=True)
        arg_num = len(arguments)
        relation_df = pd.read_csv(f"outputs/{config['output_dir']}/relations.csv")
        comments = pd.read_csv(f"inputs/{config['input']}.csv")
        clusters = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")
        labels = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_merge_labels.csv")

        hidden_properties_map: dict[str, list[str]] = config["hierarchical_aggregation"]["hidden_properties"]

        results["arguments"] = _build_arguments(clusters, comments, relation_df, config)
        results["clusters"] = _build_cluster_value(labels, arg_num)

        # results["comments"] = _build_comments_value(
        #     comments, arguments, hidden_properties_map
        # )
        results["comment_num"] = len(comments)
        results["translations"] = _build_translations(config)
        # 属性情報のカラムは、元データに対して指定したカラムとclassificationするカテゴリを合わせたもの
        results["propertyMap"] = _build_property_map(arguments, comments, hidden_properties_map, config)

        with open(f"outputs/{config['output_dir']}/hierarchical_overview.txt") as f:
            overview = f.read()
        print("overview")
        print(overview)
        results["overview"] = overview

        # Convert non-serializable NumPy types to native Python types
        results = json_serialize_numpy(results)

        with open(path, "w") as file:
            json.dump(results, file, indent=2, ensure_ascii=False)
        # TODO: サンプリングロジックを実装したいが、現状は全件抽出
        create_custom_intro(config)
        if config["is_pubcom"]:
            add_original_comments(labels, arguments, relation_df, clusters, config)
        return True
    except Exception as e:
        print("error")
        print(e)
        return False


def create_custom_intro(config):
    dataset = config["output_dir"]
    args_path = PIPELINE_DIR / f"outputs/{dataset}/args.csv"
    comments = pd.read_csv(PIPELINE_DIR / f"inputs/{config['input']}.csv")
    result_path = PIPELINE_DIR / f"outputs/{dataset}/hierarchical_result.json"

    input_count = len(comments)
    args_count = len(pd.read_csv(args_path))
    processed_num = min(input_count, config["extraction"]["limit"])

    print(f"Input count: {input_count}")
    print(f"Args count: {args_count}")

    # LLMプロバイダーとモデル名の判定
    def get_llm_provider_display():
        # configからプロバイダー情報を取得（優先）
        provider = config.get("provider", "openai")
        model = config.get("model", "unknown")

        # プロバイダー名をマッピング
        provider_names = {
            "openai": "OpenAI API",
            "azure": "Azure OpenAI API",
            "openrouter": "OpenRouter API",
            "local": "Local LLM",
        }

        provider_name = provider_names.get(provider, f"{provider} API")
        return f"{provider_name} ({model})"

    llm_provider = get_llm_provider_display()

    base_custom_intro = """{intro}
分析対象となったデータの件数は{processed_num}件で、これらのデータに対して{llm_provider}を用いて{args_count}件の意見（議論）を抽出し、クラスタリングを行った。
"""

    intro = config["intro"]
    custom_intro = base_custom_intro.format(
        intro=intro, processed_num=processed_num, args_count=args_count, llm_provider=llm_provider
    )

    with open(result_path) as f:
        result = json.load(f)
    result["config"]["intro"] = custom_intro
    with open(result_path, "w") as f:
        json.dump(result, f, indent=2, ensure_ascii=False)


def add_original_comments(labels, arguments, relation_df, clusters, config):
    # 大カテゴリ（cluster-level-1）に該当するラベルだけ抽出
    labels_lv1 = labels[labels["level"] == 1][["id", "label"]].rename(
        columns={"id": "cluster-level-1-id", "label": "category_label"}
    )

    # arguments と clusters をマージ（カテゴリ情報付与）
    merged = arguments.merge(clusters[["arg-id", "cluster-level-1-id"]], on="arg-id").merge(
        labels_lv1, on="cluster-level-1-id", how="left"
    )

    # relation_df と結合
    merged = merged.merge(relation_df, on="arg-id", how="left")

    # 元コメント取得
    comments = pd.read_csv(PIPELINE_DIR / f"inputs/{config['input']}.csv")
    comments["comment-id"] = comments["comment-id"].astype(str)
    merged["comment-id"] = merged["comment-id"].astype(str)

    # 元コメント本文などとマージ
    final_df = merged.merge(comments, on="comment-id", how="left")

    # 必要カラムのみ整形
    final_cols = ["comment-id", "comment-body", "arg-id", "argument", "cluster-level-1-id", "category_label"]

    # 基本カラム
    for col in ["x", "y", "source", "url"]:
        if col in comments.columns:
            final_cols.append(col)

    # 属性カラムを追加
    attribute_columns = []
    for col in comments.columns:
        # attributeプレフィックスが付いたカラムを探す
        if col.startswith("attribute_"):
            attribute_columns.append(col)
            final_cols.append(col)

    print(f"属性カラム検出: {attribute_columns}")

    # 必要なカラムだけ選択
    final_df = final_df[final_cols]
    final_df = final_df.rename(
        columns={
            "cluster-level-1-id": "category_id",
            "category_label": "category",
            "arg-id": "arg_id",
            "argument": "argument",
            "comment-body": "original-comment",
        }
    )

    # 保存
    final_df.to_csv(PIPELINE_DIR / f"outputs/{config['output_dir']}/final_result_with_comments.csv", index=False)


def _build_arguments(
    clusters: pd.DataFrame, comments: pd.DataFrame, relation_df: pd.DataFrame, config: dict
) -> list[Argument]:
    """
    Build the arguments list including attribute information from original comments

    Args:
        clusters: DataFrame containing cluster information for each argument
        comments: DataFrame containing original comments with attribute columns
        relation_df: DataFrame relating arguments to original comments
        config: Configuration dictionary containing enable_source_link setting
    """
    cluster_columns = [col for col in clusters.columns if col.startswith("cluster-level-") and "id" in col]

    # Prepare for merging with original comments to get attributes
    comments_copy = comments.copy()
    comments_copy["comment-id"] = comments_copy["comment-id"].astype(str)

    # Get argument to comment mapping
    arg_comment_map = {}
    if "comment-id" in relation_df.columns:
        relation_df["comment-id"] = relation_df["comment-id"].astype(str)
        arg_comment_map = dict(zip(relation_df["arg-id"], relation_df["comment-id"], strict=False))

    # Find attribute columns in comments dataframe
    attribute_columns = [col for col in comments.columns if col.startswith("attribute_")]
    print(f"属性カラム検出: {attribute_columns}")

    arguments: list[Argument] = []
    for _, row in clusters.iterrows():
        cluster_ids = ["0"]
        for cluster_column in cluster_columns:
            cluster_ids.append(str(row[cluster_column]))  # Convert to string to ensure serializable

        # Create base argument
        argument: Argument = {
            "arg_id": str(row["arg-id"]),  # Convert to string to ensure serializable
            "argument": str(row["argument"]),
            "x": float(row["x"]),  # Convert to native float
            "y": float(row["y"]),  # Convert to native float
            "p": 0,  # NOTE: 一旦全部0でいれる
            "cluster_ids": cluster_ids,
            "attributes": None,
            "url": None,
        }

        # Add attributes and URL if available
        if row["arg-id"] in arg_comment_map:
            comment_id = arg_comment_map[row["arg-id"]]
            comment_rows = comments_copy[comments_copy["comment-id"] == comment_id]

            if not comment_rows.empty:
                comment_row = comment_rows.iloc[0]

                # Add URL if available and enabled
                if config.get("enable_source_link", False) and "url" in comment_row and comment_row["url"] is not None:
                    argument["url"] = str(comment_row["url"])

                # Add attributes if available
                if attribute_columns:
                    attributes = {}
                    for attr_col in attribute_columns:
                        # Remove "attribute_" prefix for cleaner attribute names
                        attr_name = attr_col[len("attribute_") :]
                        # Convert potential numpy types to Python native types
                        attr_value = comment_row.get(attr_col, None)
                        if attr_value is not None:
                            if isinstance(attr_value, np.integer):
                                attr_value = int(attr_value)
                            elif isinstance(attr_value, np.floating):
                                attr_value = float(attr_value)
                            elif isinstance(attr_value, np.ndarray):
                                attr_value = attr_value.tolist()
                        attributes[attr_name] = attr_value

                    # Only add non-empty attributes
                    if any(v is not None for v in attributes.values()):
                        argument["attributes"] = attributes

        arguments.append(argument)
    return arguments


def _build_cluster_value(melted_labels: pd.DataFrame, total_num: int) -> list[Cluster]:
    results: list[Cluster] = [
        Cluster(
            level=0,
            id="0",
            label="全体",
            takeaway="",
            value=int(total_num),  # Convert to native int
            parent="",
            density_rank_percentile=0,
        )
    ]

    for _, melted_label in melted_labels.iterrows():
        # Convert potential NumPy types to native Python types
        level = (
            int(melted_label["level"]) if isinstance(melted_label["level"], int | np.integer) else melted_label["level"]
        )
        cluster_id = str(melted_label["id"])
        label = str(melted_label["label"])
        takeaway = str(melted_label["description"])
        value = (
            int(melted_label["value"]) if isinstance(melted_label["value"], int | np.integer) else melted_label["value"]
        )
        parent = str(melted_label.get("parent", "全体"))

        # Handle density_rank_percentile which might be None or a numeric value
        density_rank = melted_label.get("density_rank_percentile")
        if density_rank is not None:
            if isinstance(density_rank, float | np.floating):
                density_rank = float(density_rank)
            elif isinstance(density_rank, int | np.integer):
                density_rank = int(density_rank)

        cluster_value = Cluster(
            level=level,
            id=cluster_id,
            label=label,
            takeaway=takeaway,
            value=value,
            parent=parent,
            density_rank_percentile=density_rank,
        )
        results.append(cluster_value)
    return results


def _build_comments_value(
    comments: pd.DataFrame,
    arguments: pd.DataFrame,
    hidden_properties_map: dict[str, list[str]],
):
    comment_dict: dict[str, dict[str, str]] = {}
    useful_comment_ids = set(arguments["comment-id"].values)
    for _, row in comments.iterrows():
        id = row["comment-id"]
        if id in useful_comment_ids:
            res = {"comment": row["comment-body"]}
            should_skip = any(row[prop] in hidden_values for prop, hidden_values in hidden_properties_map.items())
            if should_skip:
                continue
            comment_dict[str(id)] = res

    return comment_dict


def _build_translations(config):
    languages = list(config.get("translation", {}).get("languages", []))
    if len(languages) > 0:
        with open(PIPELINE_DIR / f"outputs/{config['output_dir']}/translations.json") as f:
            translations = f.read()
        return json.loads(translations)
    return {}


def _build_property_map(
    arguments: pd.DataFrame, comments: pd.DataFrame, hidden_properties_map: dict[str, list[str]], config: dict
) -> dict[str, dict[str, str]]:
    property_columns = list(hidden_properties_map.keys()) + list(config["extraction"]["categories"].keys())
    property_map = defaultdict(dict)

    # 指定された property_columns が arguments に存在するかチェック
    missing_cols = [col for col in property_columns if col not in arguments.columns]
    if missing_cols:
        raise ValueError(
            f"指定されたカラム {missing_cols} が args.csv に存在しません。"
            "設定ファイルaggregation / hidden_propertiesから該当カラムを取り除いてください。"
        )

    for prop in property_columns:
        for arg_id, row in arguments.iterrows():
            # LLMによるcategory classificationがうまく行かず、NaNの場合はNoneにする
            value = row[prop] if not pd.isna(row[prop]) else None

            # Convert NumPy types to Python native types
            if value is not None:
                if isinstance(value, np.integer):
                    value = int(value)
                elif isinstance(value, np.floating):
                    value = float(value)
                elif isinstance(value, np.ndarray):
                    value = value.tolist()
                else:
                    # Convert any other types to string to ensure serialization
                    try:
                        value = str(value)
                    except Exception as e:
                        print(f"Error converting value to string: {e}")
                        value = None

            # Make sure arg_id is string
            str_arg_id = str(arg_id)
            property_map[prop][str_arg_id] = value

    return property_map
1d:T190e,import concurrent.futures
import json
import logging
import re

import pandas as pd
from pydantic import BaseModel, Field
from tqdm import tqdm

from services.llm import request_to_chat_ai
from services.parse_json_list import parse_extraction_response
from utils import update_progress

COMMA_AND_SPACE_AND_RIGHT_BRACKET = re.compile(r",\s*(\])")


class ExtractionResponse(BaseModel):
    extractedOpinionList: list[str] = Field(..., description="抽出した意見のリスト")


def _validate_property_columns(property_columns: list[str], comments: pd.DataFrame) -> None:
    if not all(property in comments.columns for property in property_columns):
        raise ValueError(f"Properties {property_columns} not found in comments. Columns are {comments.columns}")


def extraction(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/args.csv"
    model = config["extraction"]["model"]
    prompt = config["extraction"]["prompt"]
    workers = config["extraction"]["workers"]
    limit = config["extraction"]["limit"]
    property_columns = config["extraction"]["properties"]

    if "provider" not in config:
        raise RuntimeError("provider is not set")
    provider = config["provider"]

    # カラム名だけを読み込み、必要なカラムが含まれているか確認する
    comments = pd.read_csv(f"inputs/{config['input']}.csv", nrows=0)
    _validate_property_columns(property_columns, comments)
    # エラーが出なかった場合、すべての行を読み込む
    comments = pd.read_csv(
        f"inputs/{config['input']}.csv", usecols=["comment-id", "comment-body"] + config["extraction"]["properties"]
    )
    comment_ids = (comments["comment-id"].values)[:limit]
    comments.set_index("comment-id", inplace=True)
    results = pd.DataFrame()
    update_progress(config, total=len(comment_ids))

    argument_map = {}
    relation_rows = []

    for i in tqdm(range(0, len(comment_ids), workers)):
        batch = comment_ids[i : i + workers]
        batch_inputs = [comments.loc[id]["comment-body"] for id in batch]
        batch_results = extract_batch(
            batch_inputs, prompt, model, workers, provider, config.get("local_llm_address"), config
        )

        for comment_id, extracted_args in zip(batch, batch_results, strict=False):
            for j, arg in enumerate(extracted_args):
                if arg not in argument_map:
                    # argumentテーブルに追加
                    arg_id = f"A{comment_id}_{j}"
                    argument = arg
                    argument_map[arg] = {
                        "arg-id": arg_id,
                        "argument": argument,
                    }
                else:
                    arg_id = argument_map[arg]["arg-id"]

                # relationテーブルにcommentとargの関係を追加
                relation_row = {
                    "arg-id": arg_id,
                    "comment-id": comment_id,
                }
                relation_rows.append(relation_row)

        update_progress(config, incr=len(batch))

    # DataFrame化
    results = pd.DataFrame(argument_map.values())
    relation_df = pd.DataFrame(relation_rows)

    if results.empty:
        raise RuntimeError("result is empty, maybe bad prompt")

    results.to_csv(path, index=False)
    # comment-idとarg-idの関係を保存
    relation_df.to_csv(f"outputs/{dataset}/relations.csv", index=False)


logging.basicConfig(level=logging.ERROR)


def extract_batch(batch, prompt, model, workers, provider="openai", local_llm_address=None, config=None):
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:
        futures_with_index = [
            (i, executor.submit(extract_arguments, input, prompt, model, provider, local_llm_address))
            for i, input in enumerate(batch)
        ]

        done, not_done = concurrent.futures.wait([f for _, f in futures_with_index], timeout=30)
        results = [[] for _ in range(len(batch))]
        total_token_input = 0
        total_token_output = 0
        total_token_usage = 0

        for _, future in futures_with_index:
            if future in not_done and not future.cancelled():
                future.cancel()

        for i, future in futures_with_index:
            if future in done:
                try:
                    result = future.result()
                    if isinstance(result, tuple) and len(result) == 4:
                        items, token_input, token_output, token_total = result
                        results[i] = items
                        total_token_input += token_input
                        total_token_output += token_output
                        total_token_usage += token_total
                    else:
                        results[i] = result
                except Exception as e:
                    logging.error(f"Task {future} failed with error: {e}")
                    results[i] = []

        if config is not None:
            config["total_token_usage"] = config.get("total_token_usage", 0) + total_token_usage
            config["token_usage_input"] = config.get("token_usage_input", 0) + total_token_input
            config["token_usage_output"] = config.get("token_usage_output", 0) + total_token_output
            print(
                f"Extraction batch: input={total_token_input}, output={total_token_output}, total={total_token_usage} tokens"
            )

        return results


def extract_arguments(input, prompt, model, provider="openai", local_llm_address=None):
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=model,
            is_json=False,
            json_schema=ExtractionResponse,
            provider=provider,
            local_llm_address=local_llm_address,
        )
        items = parse_extraction_response(response)
        items = list(filter(None, items))  # omit empty strings
        return items, token_input, token_output, token_total
    except json.decoder.JSONDecodeError as e:
        print("JSON error:", e)
        print("Input was:", input)
        print("Response was:", response)
        print("Silently giving up on trying to generate valid list.")
        return []
1e:T1149,"""Cluster the arguments using UMAP + HDBSCAN and GPT-4."""

from importlib import import_module

import numpy as np
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import KMeans


def hierarchical_clustering(config):
    UMAP = import_module("umap").UMAP

    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_clusters.csv"
    arguments_df = pd.read_csv(f"outputs/{dataset}/args.csv", usecols=["arg-id", "argument"])
    embeddings_df = pd.read_pickle(f"outputs/{dataset}/embeddings.pkl")
    embeddings_array = np.asarray(embeddings_df["embedding"].values.tolist())
    cluster_nums = config["hierarchical_clustering"]["cluster_nums"]

    n_samples = embeddings_array.shape[0]
    # デフォルト設定は15
    default_n_neighbors = 15

    # テスト等サンプルが少なすぎる場合、n_neighborsの設定値を下げる
    if n_samples <= default_n_neighbors:
        n_neighbors = max(2, n_samples - 1)  # 最低2以上
    else:
        n_neighbors = default_n_neighbors

    umap_model = UMAP(random_state=42, n_components=2, n_neighbors=n_neighbors)
    # TODO 詳細エラーメッセージを加える
    # 以下のエラーの場合、おそらく元の意見件数が少なすぎることが原因
    # TypeError: Cannot use scipy.linalg.eigh for sparse A with k >= N. Use scipy.linalg.eigh(A.toarray()) or reduce k.
    umap_embeds = umap_model.fit_transform(embeddings_array)

    cluster_results = hierarchical_clustering_embeddings(
        umap_embeds=umap_embeds,
        cluster_nums=cluster_nums,
    )
    result_df = pd.DataFrame(
        {
            "arg-id": arguments_df["arg-id"],
            "argument": arguments_df["argument"],
            "x": umap_embeds[:, 0],
            "y": umap_embeds[:, 1],
        }
    )

    for cluster_level, final_labels in enumerate(cluster_results.values(), start=1):
        result_df[f"cluster-level-{cluster_level}-id"] = [f"{cluster_level}_{label}" for label in final_labels]

    result_df.to_csv(path, index=False)


def generate_cluster_count_list(min_clusters: int, max_clusters: int):
    cluster_counts = []
    current = min_clusters
    cluster_counts.append(current)

    if min_clusters == max_clusters:
        return cluster_counts

    while True:
        next_double = current * 2
        next_triple = current * 3

        if next_double >= max_clusters:
            if cluster_counts[-1] != max_clusters:
                cluster_counts.append(max_clusters)
            break

        # 次の倍はまだ max_clusters に収まるが、3倍だと超える
        # -> (次の倍は細かすぎるので)スキップして max_clusters に飛ぶ
        if next_triple > max_clusters:
            cluster_counts.append(max_clusters)
            break

        cluster_counts.append(next_double)
        current = next_double

    return cluster_counts


def merge_clusters_with_hierarchy(
    cluster_centers: np.ndarray,
    kmeans_labels: np.ndarray,
    umap_array: np.ndarray,
    n_cluster_cut: int,
):
    Z = sch.linkage(cluster_centers, method="ward")
    cluster_labels_merged = sch.fcluster(Z, t=n_cluster_cut, criterion="maxclust")

    n_samples = umap_array.shape[0]
    final_labels = np.zeros(n_samples, dtype=int)

    for i in range(n_samples):
        original_label = kmeans_labels[i]
        final_labels[i] = cluster_labels_merged[original_label]

    return final_labels


def hierarchical_clustering_embeddings(
    umap_embeds,
    cluster_nums,
):
    # 最大分割数でクラスタリングを実施
    print("start initial clustering")
    initial_cluster_num = cluster_nums[-1]
    kmeans_model = KMeans(n_clusters=initial_cluster_num, random_state=42)
    kmeans_model.fit(umap_embeds)
    print("end initial clustering")

    results = {}
    print("start hierarchical clustering")
    cluster_nums.sort()
    print(cluster_nums)
    for n_cluster_cut in cluster_nums[:-1]:
        print("n_cluster_cut: ", n_cluster_cut)
        final_labels = merge_clusters_with_hierarchy(
            cluster_centers=kmeans_model.cluster_centers_,
            kmeans_labels=kmeans_model.labels_,
            umap_array=umap_embeds,
            n_cluster_cut=n_cluster_cut,
        )
        results[n_cluster_cut] = final_labels

    results[initial_cluster_num] = kmeans_model.labels_
    print("end hierarchical clustering")

    return results
1f:T1bf8,import json
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from typing import TypedDict

import pandas as pd
from pydantic import BaseModel, Field

from services.llm import request_to_chat_ai


class LabellingResult(TypedDict):
    """各クラスタのラベリング結果を表す型"""

    cluster_id: str  # クラスタのID
    label: str  # クラスタのラベル名
    description: str  # クラスタの説明文


def hierarchical_initial_labelling(config: dict) -> None:
    """階層的クラスタリングの初期ラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_initial_labelling: 初期ラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
            - provider: LLMプロバイダー
    """
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_initial_labels.csv"
    clusters_argument_df = pd.read_csv(f"outputs/{dataset}/hierarchical_clusters.csv")

    cluster_id_columns = [col for col in clusters_argument_df.columns if col.startswith("cluster-level-")]
    initial_cluster_id_column = cluster_id_columns[-1]
    sampling_num = config["hierarchical_initial_labelling"]["sampling_num"]
    initial_labelling_prompt = config["hierarchical_initial_labelling"]["prompt"]
    model = config["hierarchical_initial_labelling"]["model"]
    workers = config["hierarchical_initial_labelling"]["workers"]

    # トークン使用量を追跡するための変数を初期化
    config["total_token_usage"] = config.get("total_token_usage", 0)

    initial_label_df = initial_labelling(
        initial_labelling_prompt,
        clusters_argument_df,
        sampling_num,
        model,
        workers,
        config["provider"],
        config.get("local_llm_address"),
        config,  # configを渡して、トークン使用量を累積できるようにする
    )
    print("start initial labelling")
    initial_clusters_argument_df = clusters_argument_df.merge(
        initial_label_df,
        left_on=initial_cluster_id_column,
        right_on="cluster_id",
        how="left",
    ).rename(
        columns={
            "label": f"{initial_cluster_id_column.replace('-id', '')}-label",
            "description": f"{initial_cluster_id_column.replace('-id', '')}-description",
        }
    )
    print("end initial labelling")
    initial_clusters_argument_df.to_csv(path, index=False)


def initial_labelling(
    prompt: str,
    clusters_df: pd.DataFrame,
    sampling_num: int,
    model: str,
    workers: int,
    provider: str = "openai",
    local_llm_address: str | None = None,
    config: dict | None = None,  # configを追加
) -> pd.DataFrame:
    """各クラスタに対して初期ラベリングを実行する

    Args:
        prompt: LLMへのプロンプト
        clusters_df: クラスタリング結果のDataFrame
        sampling_num: 各クラスタからサンプリングする意見の数
        model: 使用するLLMモデル名
        workers: 並列処理のワーカー数
        provider: LLMプロバイダー
        local_llm_address: ローカルLLMのアドレス
        config: 設定情報を含む辞書（トークン使用量の累積に使用）

    Returns:
        各クラスタのラベリング結果を含むDataFrame
    """
    cluster_columns = [col for col in clusters_df.columns if col.startswith("cluster-level-")]
    initial_cluster_column = cluster_columns[-1]
    cluster_ids = clusters_df[initial_cluster_column].unique()
    process_func = partial(
        process_initial_labelling,
        df=clusters_df,
        prompt=prompt,
        sampling_num=sampling_num,
        target_column=initial_cluster_column,
        model=model,
        provider=provider,
        local_llm_address=local_llm_address,
        config=config,  # configを渡す
    )
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(process_func, cluster_ids))
    return pd.DataFrame(results)


class LabellingFromat(BaseModel):
    """ラベリング結果のフォーマットを定義する"""

    label: str = Field(..., description="クラスタのラベル名")
    description: str = Field(..., description="クラスタの説明文")


def process_initial_labelling(
    cluster_id: str,
    df: pd.DataFrame,
    prompt: str,
    sampling_num: int,
    target_column: str,
    model: str,
    provider: str = "openai",
    local_llm_address: str | None = None,
    config: dict | None = None,  # configを追加
) -> LabellingResult:
    """個別のクラスタに対してラベリングを実行する

    Args:
        cluster_id: 処理対象のクラスタID
        df: クラスタリング結果のDataFrame
        prompt: LLMへのプロンプト
        sampling_num: サンプリングする意見の数
        target_column: クラスタIDが格納されている列名
        model: 使用するLLMモデル名
        provider: LLMプロバイダー
        local_llm_address: ローカルLLMのアドレス
        config: 設定情報を含む辞書（トークン使用量の累積に使用）

    Returns:
        クラスタのラベリング結果
    """
    cluster_data = df[df[target_column] == cluster_id]
    sampling_num = min(sampling_num, len(cluster_data))
    cluster = cluster_data.sample(sampling_num)
    input = "\n".join(cluster["argument"].values)
    messages = [
        {"role": "system", "content": prompt},
        {"role": "user", "content": input},
    ]
    try:
        response_text, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=model,
            provider=provider,
            json_schema=LabellingFromat,
            local_llm_address=local_llm_address,
        )

        # トークン使用量を累積（configが渡されている場合）
        if config is not None:
            config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
            config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
            config["token_usage_output"] = config.get("token_usage_output", 0) + token_output

        response_json = json.loads(response_text) if isinstance(response_text, str) else response_text
        return LabellingResult(
            cluster_id=cluster_id,
            label=response_json.get("label", "エラーでラベル名が取得できませんでした"),
            description=response_json.get("description", "エラーで解説が取得できませんでした"),
        )
    except Exception as e:
        print(e)
        return LabellingResult(
            cluster_id=cluster_id,
            label="エラーでラベル名が取得できませんでした",
            description="エラーで解説が取得できませんでした",
        )
20:T333d,import json
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from functools import partial

import numpy as np
import pandas as pd
from pydantic import BaseModel, Field
from tqdm import tqdm

from services.llm import request_to_chat_ai


@dataclass
class ClusterColumns:
    """同一階層のクラスター関連のカラム名を管理するクラス"""

    id: str
    label: str
    description: str

    @classmethod
    def from_id_column(cls, id_column: str) -> "ClusterColumns":
        """ID列名から関連するカラム名を生成"""
        return cls(
            id=id_column,
            label=id_column.replace("-id", "-label"),
            description=id_column.replace("-id", "-description"),
        )


@dataclass
class ClusterValues:
    """対象クラスタのlabel/descriptionを管理するクラス"""

    label: str
    description: str

    def to_prompt_text(self) -> str:
        return f"- {self.label}: {self.description}"


def hierarchical_merge_labelling(config: dict) -> None:
    """階層的クラスタリングの結果に対してマージラベリングを実行する

    Args:
        config: 設定情報を含む辞書
            - output_dir: 出力ディレクトリ名
            - hierarchical_merge_labelling: マージラベリングの設定
                - sampling_num: サンプリング数
                - prompt: LLMへのプロンプト
                - model: 使用するLLMモデル名
                - workers: 並列処理のワーカー数
            - provider: LLMプロバイダー
    """
    dataset = config["output_dir"]
    merge_path = f"outputs/{dataset}/hierarchical_merge_labels.csv"
    clusters_df = pd.read_csv(f"outputs/{dataset}/hierarchical_initial_labels.csv")

    cluster_id_columns: list[str] = _filter_id_columns(clusters_df.columns)
    # ボトムクラスタのラベル・説明とクラスタid付きの各argumentを入力し、各階層のクラスタラベル・説明を生成し、argumentに付けたdfを作成
    merge_result_df = merge_labelling(
        clusters_df=clusters_df,
        cluster_id_columns=sorted(cluster_id_columns, reverse=True),
        config=config,
    )
    # 上記のdfから各クラスタのlevel, id, label, description, valueを取得してdfを作成
    melted_df = melt_cluster_data(merge_result_df)
    # 上記のdfに親子関係を追加
    parent_child_df = _build_parent_child_mapping(merge_result_df, cluster_id_columns)
    melted_df = melted_df.merge(parent_child_df, on=["level", "id"], how="left")
    density_df = calculate_cluster_density(melted_df, config)
    density_df.to_csv(merge_path, index=False)


def _build_parent_child_mapping(df: pd.DataFrame, cluster_id_columns: list[str]):
    """クラスタ間の親子関係をマッピングする

    Args:
        df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト

    Returns:
        親子関係のマッピング情報を含むDataFrame
    """
    results = []
    top_cluster_column = cluster_id_columns[0]
    top_cluster_values = df[top_cluster_column].unique()
    for c in top_cluster_values:
        results.append(
            {
                "level": 1,
                "id": c,
                "parent": "0",  # aggregationで追加する全体クラスタのid
            }
        )

    for idx in range(len(cluster_id_columns) - 1):
        current_column = cluster_id_columns[idx]
        children_column = cluster_id_columns[idx + 1]
        current_level = current_column.replace("-id", "").replace("cluster-level-", "")
        # 現在のレベルのクラスタid
        current_cluster_values = df[current_column].unique()
        for current_id in current_cluster_values:
            children_ids = df.loc[df[current_column] == current_id, children_column].unique()
            for child_id in children_ids:
                results.append(
                    {
                        "level": int(current_level) + 1,
                        "id": child_id,
                        "parent": current_id,
                    }
                )
    return pd.DataFrame(results)


def _filter_id_columns(columns: list[str]) -> list[str]:
    """クラスタIDのカラム名をフィルタリングする

    Args:
        columns: 全カラム名のリスト

    Returns:
        クラスタIDのカラム名のリスト
    """
    return [col for col in columns if col.startswith("cluster-level-") and col.endswith("-id")]


def melt_cluster_data(df: pd.DataFrame) -> pd.DataFrame:
    """クラスタデータを行形式に変換する

    cluster-level-n-(id|label|description) を行形式 (level, id, label, description, value) にまとめる。
    [cluster-level-n-id, cluster-level-n-label, cluster-level-n-description] を [level, id, label, description, value(件数)] に変換する。

    Args:
        df: クラスタリング結果のDataFrame

    Returns:
        行形式に変換されたDataFrame
    """
    id_columns: list[str] = _filter_id_columns(df.columns)
    levels: set[int] = {int(col.replace("cluster-level-", "").replace("-id", "")) for col in id_columns}
    all_rows: list[dict] = []

    # levelごとに各クラスタの出現件数を集計・縦持ちにする
    for level in levels:
        cluster_columns = ClusterColumns.from_id_column(f"cluster-level-{level}-id")
        # クラスタidごとの件数集計
        level_count_df = df.groupby(cluster_columns.id).size().reset_index(name="value")

        level_unique_val_df = df[
            [cluster_columns.id, cluster_columns.label, cluster_columns.description]
        ].drop_duplicates()
        level_unique_val_df = level_unique_val_df.merge(level_count_df, on=cluster_columns.id, how="left")
        level_unique_vals = [
            {
                "level": level,
                "id": row[cluster_columns.id],
                "label": row[cluster_columns.label],
                "description": row[cluster_columns.description],
                "value": row["value"],
            }
            for _, row in level_unique_val_df.iterrows()
        ]
        all_rows.extend(level_unique_vals)
    return pd.DataFrame(all_rows)


def merge_labelling(clusters_df: pd.DataFrame, cluster_id_columns: list[str], config) -> pd.DataFrame:
    """階層的なクラスタのマージラベリングを実行する

    Args:
        clusters_df: クラスタリング結果のDataFrame
        cluster_id_columns: クラスタIDのカラム名のリスト
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含むDataFrame
    """
    for idx in tqdm(range(len(cluster_id_columns) - 1)):
        previous_columns = ClusterColumns.from_id_column(cluster_id_columns[idx])
        current_columns = ClusterColumns.from_id_column(cluster_id_columns[idx + 1])

        process_fn = partial(
            process_merge_labelling,
            result_df=clusters_df,
            current_columns=current_columns,
            previous_columns=previous_columns,
            config=config,
        )

        current_cluster_ids = sorted(clusters_df[current_columns.id].unique())
        with ThreadPoolExecutor(max_workers=config["hierarchical_merge_labelling"]["workers"]) as executor:
            responses = list(
                tqdm(
                    executor.map(process_fn, current_cluster_ids),
                    total=len(current_cluster_ids),
                )
            )

        current_result_df = pd.DataFrame(responses)
        clusters_df = clusters_df.merge(current_result_df, on=[current_columns.id])
    return clusters_df


class LabellingFromat(BaseModel):
    """ラベリング結果のフォーマットを定義する"""

    label: str = Field(..., description="クラスタのラベル名")
    description: str = Field(..., description="クラスタの説明文")


def process_merge_labelling(
    target_cluster_id: str,
    result_df: pd.DataFrame,
    current_columns: ClusterColumns,
    previous_columns: ClusterColumns,
    config,
):
    """個別のクラスタに対してマージラベリングを実行する

    Args:
        target_cluster_id: 処理対象のクラスタID
        result_df: クラスタリング結果のDataFrame
        current_columns: 現在のレベルのカラム情報
        previous_columns: 前のレベルのカラム情報
        config: 設定情報を含む辞書

    Returns:
        マージラベリング結果を含む辞書
    """

    def filter_previous_values(df: pd.DataFrame, previous_columns: ClusterColumns) -> list[ClusterValues]:
        """前のレベルのクラスタ情報を取得する"""
        previous_records = df[df[current_columns.id] == target_cluster_id][
            [previous_columns.label, previous_columns.description]
        ].drop_duplicates()
        previous_values = [
            ClusterValues(
                label=row[previous_columns.label],
                description=row[previous_columns.description],
            )
            for _, row in previous_records.iterrows()
        ]
        return previous_values

    previous_values = filter_previous_values(result_df, previous_columns)
    if len(previous_values) == 1:
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: previous_values[0].label,
            current_columns.description: previous_values[0].description,
        }
    elif len(previous_values) == 0:
        raise ValueError(f"クラスタ {target_cluster_id} には前のレベルのクラスタが存在しません。")

    current_cluster_data = result_df[result_df[current_columns.id] == target_cluster_id]
    sampling_num = min(
        config["hierarchical_merge_labelling"]["sampling_num"],
        len(current_cluster_data),
    )
    sampled_data = current_cluster_data.sample(sampling_num)
    sampled_argument_text = "\n".join(sampled_data["argument"].values)
    cluster_text = "\n".join([value.to_prompt_text() for value in previous_values])
    messages = [
        {"role": "system", "content": config["hierarchical_merge_labelling"]["prompt"]},
        {
            "role": "user",
            "content": "クラスタラベル\n" + cluster_text + "\n" + "クラスタの意見\n" + sampled_argument_text,
        },
    ]
    try:
        response_text, token_input, token_output, token_total = request_to_chat_ai(
            messages=messages,
            model=config["hierarchical_merge_labelling"]["model"],
            json_schema=LabellingFromat,
            provider=config["provider"],
            local_llm_address=config.get("local_llm_address"),
        )

        config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
        config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
        config["token_usage_output"] = config.get("token_usage_output", 0) + token_output
        print(f"Merge labelling: input={token_input}, output={token_output}, total={token_total} tokens")

        response_json = json.loads(response_text) if isinstance(response_text, str) else response_text
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: response_json.get("label", "エラーでラベル名が取得できませんでした"),
            current_columns.description: response_json.get("description", "エラーで解説が取得できませんでした"),
        }
    except Exception as e:
        print(f"エラーが発生しました: {e}")
        return {
            current_columns.id: target_cluster_id,
            current_columns.label: "エラーでラベル名が取得できませんでした",
            current_columns.description: "エラーで解説が取得できませんでした",
        }


def calculate_cluster_density(melted_df: pd.DataFrame, config: dict):
    """クラスタ内の密度計算"""
    hierarchical_cluster_df = pd.read_csv(f"outputs/{config['output_dir']}/hierarchical_clusters.csv")

    densities = []
    for level, c_id in zip(melted_df["level"], melted_df["id"], strict=False):
        cluster_embeds = hierarchical_cluster_df[hierarchical_cluster_df[f"cluster-level-{level}-id"] == c_id][
            ["x", "y"]
        ].values
        density = calculate_density(cluster_embeds)
        densities.append(density)

    # 密度のランクを計算
    melted_df["density"] = densities
    melted_df["density_rank"] = melted_df.groupby("level")["density"].rank(ascending=False, method="first")
    melted_df["density_rank_percentile"] = melted_df.groupby("level")["density_rank"].transform(lambda x: x / len(x))
    return melted_df


def calculate_density(embeds: np.ndarray):
    """平均距離に基づいて密度を計算"""
    center = np.mean(embeds, axis=0)
    distances = np.linalg.norm(embeds - center, axis=1)
    avg_distance = np.mean(distances)
    density = 1 / (avg_distance + 1e-10)
    return density
21:Ta48,"""Create summaries for the clusters."""

import json
import re

import pandas as pd
from pydantic import BaseModel, Field

from services.llm import request_to_chat_ai


class OverviewResponse(BaseModel):
    summary: str = Field(..., description="クラスターの全体的な要約")


def hierarchical_overview(config):
    dataset = config["output_dir"]
    path = f"outputs/{dataset}/hierarchical_overview.txt"

    hierarchical_label_df = pd.read_csv(f"outputs/{dataset}/hierarchical_merge_labels.csv")

    prompt = config["hierarchical_overview"]["prompt"]
    model = config["hierarchical_overview"]["model"]

    # TODO: level1で固定にしているが、設定で変えられるようにする
    target_level = 1
    target_records = hierarchical_label_df[hierarchical_label_df["level"] == target_level]
    ids = target_records["id"].to_list()
    labels = target_records["label"].to_list()
    descriptions = target_records["description"].to_list()
    target_records.set_index("id", inplace=True)

    input_text = ""
    for i, _ in enumerate(ids):
        input_text += f"# Cluster {i}/{len(ids)}: {labels[i]}\n\n"
        input_text += descriptions[i] + "\n\n"

    messages = [{"role": "system", "content": prompt}, {"role": "user", "content": input_text}]
    response_text, token_input, token_output, token_total = request_to_chat_ai(
        messages=messages,
        model=model,
        provider=config["provider"],
        local_llm_address=config.get("local_llm_address"),
        json_schema=OverviewResponse,
    )

    # トークン使用量を累積
    config["total_token_usage"] = config.get("total_token_usage", 0) + token_total
    config["token_usage_input"] = config.get("token_usage_input", 0) + token_input
    config["token_usage_output"] = config.get("token_usage_output", 0) + token_output
    print(f"Hierarchical overview: input={token_input}, output={token_output}, total={token_total} tokens")

    try:
        # structured outputとしてパースできるなら処理する
        if isinstance(response_text, dict):
            parsed_response = response_text
        else:
            parsed_response = json.loads(response_text)

        with open(path, "w") as file:
            file.write(parsed_response["summary"])

    except Exception:
        # thinkタグが出力されるReasoningモデル用に、thinkタグを除去する
        thinking_removed = re.sub(
            r"<think\b[^>]*>.*?</think>",
            "",
            response_text,
            flags=re.DOTALL,
        )

        with open(path, "w") as file:
            file.write(thinking_removed)
8:[["$","div",null,{"className":"container","children":[["$","$L11",null,{}],["$","$L12",null,{"mx":"auto","maxW":"750px","mb":8,"children":[["$","$L13",null,{"textAlign":"left","fontSize":"xl","mb":5,"children":"レポート"}],["$","$L13",null,{"as":"h2","size":"4xl","mb":2,"className":"headingColor","children":"加古川市スマートシティ構想に対する意見"}],["$","$L14",null,{"fontWeight":"bold","fontSize":"xl","mb":2,"children":[["$","$L15",null,{"mr":1,"children":["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":20,"height":20,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-messages-square","children":[["$","path","p1xzt8",{"d":"M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z"}],["$","path","1cx29u",{"d":"M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1"}],"$undefined"]}]}],"407","件"]}],["$","p",null,{"children":"加古川市では、地域の安全性と利便性向上を目指し、情報統合や交通施策の強化が求められています。市民参加を促進するためのデジタルインフラ整備や、高齢者支援を含む世代間協力の重要性も強調されています。また、交通・農業・観光を活かした地域活性化戦略や、ICTを活用した教育・行政の効率化が地域の発展に寄与することが期待されています。"}]]}],["$","$L16",null,{"result":{"arguments":[{"arg_id":"Acsv-1_0","argument":"かこがわアプリをダウンロードし活用する方を対象に、広報などの紙媒体情報誌が不必要な人を募集すべきである。","x":9.136537,"y":7.5710354,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-1_1","argument":"閲覧率の低下防止には、かこがわアプリの通知機能を活用し、見逃し機会を減らすことが重要である。","x":9.08946,"y":7.5379276,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-2_0","argument":"現状加古川アプリの利便性があまり高くないと感じる","x":8.532769,"y":7.830145,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-2_1","argument":"欲しい情報にダイレクトにアクセスできない","x":10.954746,"y":7.96234,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-2_2","argument":"多くのボタンが他サイトへリンクになっていることが原因の一つ","x":9.259681,"y":8.233111,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-2_3","argument":"かこバスの時刻表が市のホームページに飛ばされ、PDFデータをダウンロードしなければならないのが煩わしい","x":8.821548,"y":6.9606085,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-2_4","argument":"かこバスの時刻表など、アプリ内で情報を完結できるようにすべき","x":8.863238,"y":6.9824147,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_0","argument":"かこがわアプリは「市の情報が集まるハブ」として良い情報ツールになる可能性がある。","x":9.262266,"y":7.386853,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_1","argument":"アプリ内で完結しないことが、かこがわアプリの弱点である。","x":8.9786215,"y":7.4704933,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_2","argument":"かこがわアプリを経由してアクセスするメリットがあまりない。","x":8.936668,"y":7.532317,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_3","argument":"災害時にはかこがわアプリが有益なツールになるが、平常時には親しみを持って開こうと思えるアプリではない。","x":9.079294,"y":7.3726835,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_4","argument":"市側が災害時の情報発信源としての活用を主軸にしている可能性がある。","x":10.778883,"y":7.408656,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-3_5","argument":"市としてかこがわアプリをどのような情報発信源として位置づけているのかを知りたい。","x":9.42125,"y":7.434546,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-4_0","argument":"あまねくどんな年齢の市民においても、親しんで積極的に開こうと思えるアプリになっているとは言えない。","x":7.8883586,"y":10.791331,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-5_0","argument":"「見守りタグ検知機能」は防災アプリとの連携が重要で、市民にとって有益であるため、多くの市民がアプリをインストールすることが求められる。","x":9.568231,"y":7.3611794,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-5_1","argument":"アプリには「非常時に発揮される機能」だけでなく、魅力的な機能を持たせる必要がある。","x":8.897754,"y":7.505082,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-5_2","argument":"アプリからアクセスできる情報が中高大学生にとって少ないため、進学情報や学校・園の催し、部活動の紹介などを掲載する場が必要。","x":8.78342,"y":7.9106765,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-5_3","argument":"学生世代が興味を持つようなかこがわアプリの利活用法が開発されると良い。","x":8.208335,"y":10.595809,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-6_0","argument":"転入者に対して、ソフト面のサポートが手厚いと他市から引っ越しやすい。","x":8.155191,"y":9.794968,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-6_1","argument":"転入者向けに、かかりつけ医の紹介やランチが美味しいおしゃれカフェMAPなど、「安心」と「楽しい」要素を取り入れた案内が必要。","x":8.128858,"y":9.797908,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-7_0","argument":"転入者向けや年代別のコミュニティが必要である。","x":8.411442,"y":10.145572,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-7_1","argument":"結婚で地元を離れる際に、そういったコミュニティがあれば良いと思う。","x":9.129833,"y":10.215833,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-7_2","argument":"市のHPではコミュニティの情報が見つけられなかったので、案内を充実させてほしい。","x":10.768761,"y":8.138914,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"3.欲しい情報がすぐ手に入る効果的な情報発信"},"url":null},{"arg_id":"Acsv-8_0","argument":"高齢者にスマホアプリを活用してもらうためには、ICT技術を学ぶモチベーションを高める必要がある。","x":7.8178334,"y":11.310762,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-8_1","argument":"高齢者が便利なサービスを体験できる仕組みを作り、電話やFAXでサービスの代行を行うことで、便利さを実感させるべき。","x":7.54538,"y":10.973671,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-8_2","argument":"加古川市で固定電話を活用したICTサービスの窓口を設置することで、高齢者がスマホを使うモチベーションを高めることができる。","x":7.7018547,"y":10.953828,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-9_0","argument":"スマホ利用、SNS活用の年代間のデジタルディバイドは長期的に解消されるはずであるが、新たなICTサービスの登場により新たなデジタルディバイドが発生する可能性がある。","x":7.9981236,"y":11.828891,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-9_1","argument":"加古川市がスマートシティとなるためには、高齢者がICTツールを活用できるシステムを積極的に構築することが重要である。","x":7.696185,"y":10.502423,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-9_2","argument":"高校生が高齢者にスマホアプリ活用術を教える場を設定するなどの具体策が考えられる。","x":8.024638,"y":10.996701,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-10_0","argument":"高校生が高齢者にスマホアプリ活用術を教える場を設けるアイデアは面白いが、若者と高齢者のスマホの使い方には違いがある。","x":7.906768,"y":11.109296,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-10_1","argument":"高齢者が必要とするスマホの使い方や情報収集の方法は、若者が主に使う方法とは異なる。","x":7.6729383,"y":11.287765,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-10_2","argument":"ICTの普及は世代によって異なる必要があり、高齢者が得るべき情報やサービスを明確にする必要がある。","x":7.6084185,"y":11.297243,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-10_3","argument":"加古川市が全世代が恩恵を享受できるスマートシティになるためには、高齢者向けの情報やサービスの提供について考えるべきである。","x":7.575259,"y":10.613115,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-11_0","argument":"高齢者がスマホやタブレットを使って得るべき情報やサービスについて具体的なアイデア例の提示が必要である。","x":7.773944,"y":11.268297,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-11_1","argument":"市は高齢者に貢献できる目玉事業を提示し、それに対して教育の立場から手助けできる方法を考えるべきである。","x":7.497261,"y":10.605546,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_0","argument":"東健二郎さんの意見に共感する","x":9.008142,"y":10.1381855,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_1","argument":"ICT機器やスマートフォンを活用した情報提供・共有は全市的な要素と個別的な要素に分けて考える必要がある","x":11.016348,"y":8.56529,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_2","argument":"全市民が情報共有できることが理想だが、技術革新に追いつかない層がいることを前提にする必要がある","x":10.990389,"y":8.0503025,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_3","argument":"市の施策の中で情報が届かない層に必要な情報を届けることは難しい課題である","x":10.929474,"y":7.9660807,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_4","argument":"市の施策の機会を利用して情報提供・共有ができれば多くの利点がある","x":10.800561,"y":8.19991,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-12_5","argument":"全市的な情報提供・共有のためのデバイス等の検討は今後も進めるべきである","x":10.825759,"y":8.432093,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-13_0","argument":"データは鮮度が命であるべき","x":11.319577,"y":8.656475,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"7.行政情報の見える化"},"url":null},{"arg_id":"Acsv-13_1","argument":"タイムリーに更新し、できる限り新しい情報が公開できる仕組み作りが望ましい","x":10.991545,"y":7.95969,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"7.行政情報の見える化"},"url":null},{"arg_id":"Acsv-14_0","argument":"駅チカのクリニックはJR付近に偏っており、私鉄沿線に病院が少ないと感じる。","x":7.4329123,"y":7.775422,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-14_1","argument":"施設が古い。","x":9.543551,"y":8.804088,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-14_2","argument":"産婦人科が特に少なくて困っている。","x":7.656072,"y":7.953013,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-14_3","argument":"予約がいっぱいで新規の予約は次の週になることが多い。","x":9.271783,"y":8.4746065,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-14_4","argument":"混んでいるため、予約通りにいかない気がする。","x":9.31826,"y":8.363222,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-14_5","argument":"日没後は予約が空いていることが多いが、街灯が少ない道を帰るのが怖い。","x":8.451681,"y":7.3805213,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-15_0","argument":"シニア世代による子育て支援を提案している","x":8.783784,"y":10.347091,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-15_1","argument":"ファミリーサポートの利用率を上げる方法を考察している","x":8.666562,"y":10.060109,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-15_2","argument":"提案がスマートシティ構想の「安心して子育てができるまちづくり」に貢献できると考えている","x":7.9572287,"y":9.950117,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-15_3","argument":"マッチングアプリを導入するために人と人をつなぐ必要がある","x":8.415115,"y":9.792338,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-15_4","argument":"既存の組織を活用するアイデアが生かせるはずである","x":9.86019,"y":9.9144945,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-16_0","argument":"保育士の働き方変革支援のために、既存ICTの早期導入をすべき","x":10.922632,"y":10.504385,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-16_1","argument":"全私立認可保育施設へのカメラによる保護者の体温チェック、お掃除ロボット、連絡帳アプリ等の導入をすべき","x":10.849998,"y":10.29806,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-16_2","argument":"ICT環境に不慣れな保育士・施設を支援するために、全ICT支援サポーターの導入をすべき","x":10.9765005,"y":10.592841,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-17_0","argument":"チャレンジクラブのICTを推進してほしい","x":10.774854,"y":11.17987,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-17_1","argument":"市民活動団体、企業・団体の協力のもと、学校の授業とは異なるオンライン講座の開催を推進してほしい","x":9.148048,"y":10.61804,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-17_2","argument":"最先端のICTであるMR、e-スポーツ、ブロックプログラミング等を活用した体験学習の機会提供を推進してほしい","x":10.494593,"y":11.210796,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-18_0","argument":"子育て世代包括支援センターオンライン相談室の設置を検討すべき","x":9.229588,"y":10.476086,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-18_1","argument":"WEB面談によって保健師や保護者・子どもの顔が見える形で相談できるようにすべき","x":9.503362,"y":10.591714,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_0","argument":"提案は是非実現してほしい","x":9.297043,"y":9.819817,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_1","argument":"シニア個人では責任が重すぎるという意見はごもっとも","x":9.106522,"y":10.144612,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_2","argument":"今回の提案は子育て支援「チーム」としてシニア世代が参加しやすい","x":8.5547285,"y":10.37929,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_3","argument":"ファミサポ依頼会員の利用率が上がると提供会員が不足するジレンマがある","x":9.32246,"y":9.455513,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_4","argument":"本提案は依頼・提供会員両方を向上させる方法である","x":9.009732,"y":9.843112,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_5","argument":"STEAMによる地域課題の解決方法提案にも興味がある","x":10.177392,"y":12.302351,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-19_6","argument":"他の東高生が提案した案件や冨田さんチームの他の案件を適切な箇所に投稿してほしい","x":9.178552,"y":9.823695,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-20_0","argument":"保育士の負担を軽減するために、書類や報告書のシンプル化と役割の線引きが必要である。","x":10.977897,"y":10.321216,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-20_1","argument":"ICT導入により、保育士の負担を更に軽減できる可能性がある。","x":11.1051445,"y":10.363837,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-21_0","argument":"子宮頚がんワクチン接種の費用補助対象を再度拡大すべきである。","x":7.4643135,"y":10.090396,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-21_1","argument":"平成25年6月までの費用補助対象者に対して、現在接種を希望する女性を再び補助対象にすることを提案する。","x":7.461717,"y":10.025821,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-22_0","argument":"いろいろな申請や申し込みが時間を問わず可能になることに賛成である。","x":9.725698,"y":8.897129,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-22_1","argument":"公務員も仕事をしているため、インターネットでの申し込みが多いと思う。","x":10.036378,"y":9.055206,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-22_2","argument":"他の自治体での手続きのために会社を休む必要があるのは不便である。","x":10.908628,"y":9.085922,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-22_3","argument":"できるだけ多くの手続きがオンラインでできるとありがたい。","x":9.341136,"y":8.923325,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-23_0","argument":"体育館やテニスコート、野球場などのスポーツ施設や公民館の会議室は多くの人が利用している。","x":9.503076,"y":8.91411,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-24_0","argument":"スポーツ施設はネット予約ができるべきである。","x":9.495043,"y":8.678129,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-24_1","argument":"公民館などの会議室やキャンプ場もネット予約やオンライン決済に対応すべきである。","x":9.63905,"y":8.993742,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-25_0","argument":"スポーツ施設の予約はオンラインでできるが、使用前に窓口での申請書記入と現金払いが必要である。","x":9.443153,"y":8.755508,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-25_1","argument":"予約、申請、支払いをオンラインでスムーズに手続きできるように改善すべきである。","x":9.410401,"y":8.816789,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-26_0","argument":"できない理由より、今ある便利なものをどう使うかを検討すべき","x":9.923047,"y":9.058889,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-26_1","argument":"市民のためにも職員の対面接触を減らすために検討すべき","x":10.581265,"y":9.829394,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"1.いつでもどこでもできるストレスフリーな行政手続きの実現"},"url":null},{"arg_id":"Acsv-27_0","argument":"個別最適化された学習内容は具体的に何をするのか明確にする必要がある。","x":10.065573,"y":11.723938,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-27_1","argument":"紙媒体がデジタルになることで軽くなるのは良いことだと思う。","x":8.712182,"y":12.392486,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-27_2","argument":"インターネット環境が整っていない家庭や金銭的に難しい家庭の問題について考慮する必要がある。","x":9.709573,"y":9.7097845,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-28_0","argument":"生徒がICT機器を使うことで、問題の答えを考えたり、想像したりすることが減ると思う。","x":10.395938,"y":11.351958,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-28_1","argument":"その結果、想像力が低下すると思う。","x":10.326019,"y":11.274961,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-29_0","argument":"高校入試は紙媒体で行われるべきか疑問がある。","x":8.980738,"y":11.755269,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-29_1","argument":"普段の勉強がタブレットで行われている場合、テストが紙媒体だと解答スピードに影響が出る可能性がある。","x":9.013663,"y":11.864328,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-30_0","argument":"Gigaスクールの取り組みに感動した。","x":9.782272,"y":11.831613,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-30_1","argument":"一人一台の貸与パソコンについて、4.5万円を超える額の負担者が知りたい。","x":10.310524,"y":9.293369,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-30_2","argument":"家にインターネット接続媒体がない家庭の子供の通信費の負担者が知りたい。","x":10.017963,"y":9.459329,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-31_0","argument":"AI学習は個人のレベルにあった学習ができるのは良いが、学力の差が広がる可能性があるのではないか。","x":9.366707,"y":11.993752,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-31_1","argument":"タブレット端末による学習が主になることで、書く能力に影響が出るのではないか。","x":9.161232,"y":12.0180235,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-32_0","argument":"AI型学習が主になることで、生徒はタブレット一つで多くの学習ができるのは素晴らしい。","x":9.3720455,"y":12.023768,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-32_1","argument":"AIが教える役割を担う場合、教師の役割はどう変わるのか疑問である。","x":9.6452875,"y":12.041887,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-33_0","argument":"国や地域と連携して考えられている","x":9.685092,"y":10.620325,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-33_1","argument":"頑張ってください","x":9.431932,"y":9.71437,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-34_0","argument":"教材、書類のデジタル化には賛成であり、ランドセルが軽くなるのは良いことだと思う。","x":8.861964,"y":12.423146,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-34_1","argument":"小学生、中学生へのブルーライトの影響が心配であり、ブルーライトカットのメガネを市内の児童・生徒全員に配布することを検討すべき。","x":9.054725,"y":11.268286,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-35_0","argument":"個人に合わせた進度で学習できるのは非常に良いことだが、パソコン使用による視力の低下が懸念される","x":9.205196,"y":12.109361,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-35_1","argument":"視力低下対策として適度な休憩を呼びかけるべきであり、ブルーライトカットの眼鏡やカバーを導入すべき","x":8.91604,"y":11.213133,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_0","argument":"デジタル教育を進めることに好意的である","x":9.017704,"y":12.501798,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_1","argument":"児童・生徒の健康面が心配である","x":9.123657,"y":11.3169775,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_2","argument":"視力低下や寝付き・姿勢の悪化が問題である","x":8.720702,"y":11.209765,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_3","argument":"加古川市での対策案を求めている","x":7.8085437,"y":8.454771,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_4","argument":"ブルーライトカットのフィルムやメガネの使用を提案している","x":8.971836,"y":11.158256,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-36_5","argument":"加古川市が使用時間合計・時間帯を管理するシステムの導入を提案している","x":8.207884,"y":8.475543,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-37_0","argument":"GIGAスクールを機に、小学生や中学生にデータに立脚した問題解決力を養う学びを市全体に広めるべき","x":9.863935,"y":11.647018,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-37_1","argument":"RESASを使った学びのモデルを公開し、現職の先生方が取り組みやすい教育を提供すべき","x":9.752339,"y":11.323618,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-37_2","argument":"加古川市の強みに教育を加えることが重要である","x":7.4926076,"y":8.788345,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-37_3","argument":"教育に熱心な親は幼児教育の次の段階を見ているため、子育て世代の転入にも効果がある","x":9.891769,"y":11.284236,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-38_0","argument":"現代はすごい時代である。","x":8.422594,"y":12.441244,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-39_0","argument":"デジタル教育の推進に賛成である。","x":8.972285,"y":12.470958,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-39_1","argument":"新たなデジタル教育の指導要領がプログラムに偏りすぎていると感じる。","x":9.038451,"y":12.592236,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-39_2","argument":"大人が「高度なIT要員の育成」に焦っているのではないか。","x":10.71705,"y":10.460981,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-39_3","argument":"デジタル教育においてインターネットの活用方法にもっとリソースを費やすべきだ。","x":9.071306,"y":12.447549,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-39_4","argument":"興味のあることを学ぶことが重要であり、その興味を育てる方法を教えるべきだ。","x":9.858038,"y":12.284966,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-40_0","argument":"Markdown記法を使うとうまくいくようです。","x":9.537343,"y":8.004186,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-41_0","argument":"リンクを間違えたことを謝罪する必要がある。","x":9.141139,"y":8.207762,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-42_0","argument":"国際的なロボットコンテストである「WRO」を活用したプログラミング教育を推進すべき","x":10.03024,"y":11.581005,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-43_0","argument":"小・中学生にはWROの教育・学習を通じて創造性と問題解決力を養ってほしい","x":10.1774845,"y":11.8042555,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-43_1","argument":"チームワークでコミュニケーション力を向上させてほしい","x":10.502052,"y":10.786797,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-43_2","argument":"先端科学技術を体験してほしい","x":10.331474,"y":11.036092,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-44_0","argument":"GIGAスクールの推進にあわせて、児童・生徒評価基準を改訂すべきである。","x":9.488698,"y":11.611193,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-44_1","argument":"不登校児童・生徒がオンライン出席や補充授業、面談等を通じて、リアル出席者と同じように卒業できる評価基準へ改訂すべきである。","x":9.398696,"y":11.483753,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-45_0","argument":"公共図書館主催でお話会・読み聞かせ等をオンラインで行うべき","x":9.424038,"y":9.57708,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-45_1","argument":"事前撮りの動画ではなく、オンラインによるWEB会議方式で双方向性コミュニケーションを成立させるべき","x":9.432996,"y":10.43362,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-46_0","argument":"ICTを効果的に活用して協同的探求学習を深化させるべき","x":10.912673,"y":11.148891,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-46_1","argument":"STEAM教育に取り組むことで主体的・対話的で深い学びの改善を図るべき","x":10.163291,"y":12.248258,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-46_2","argument":"理数教育の充実や英語によるコミュニケーション能力の育成を実施する方法としてSTEAM教育を推進すべき","x":10.1496725,"y":12.121344,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_0","argument":"デジタル教育は難しいが、具体的なプロジェクトを通じて学ぶことが有益である。","x":9.075732,"y":12.559666,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_1","argument":"IoTデバイスを学生が自分たちで考えて作ることができれば、教育に大きなメリットがある。","x":9.676486,"y":11.808016,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_2","argument":"加古川市での見守りインフラや環境センサーの開発は、学生にとって実践的な学びの場となる。","x":8.054219,"y":8.835225,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_3","argument":"農家や企業からの具体的なリクエストを学生に提示することで、実際の需要に基づいたプロジェクトが生まれる。","x":8.51901,"y":9.563614,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_4","argument":"知的財産権の保護について学ぶことも、学生にとって重要な経験となる。","x":9.963253,"y":12.21803,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-47_5","argument":"役に立つ課題を解決する熱意がデジタル教育を通じて育まれることを期待する。","x":9.45989,"y":12.429685,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-48_0","argument":"市内の全園児へスマートデバイス(タブレット端末)を支給し、活用してほしい","x":8.490522,"y":11.393638,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-48_1","argument":"ICT教育を早期に開始し、ICTを活用したコミュニケーション力、チームワーク力、創造力を育成してほしい","x":10.815628,"y":10.999351,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-49_0","argument":"市内全小・中学校でe-スポーツ部を設立してほしい","x":9.343382,"y":11.0849695,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-49_1","argument":"e-スポーツは思考力、判断力、表現力、コミュニケーション力の向上に活用できる","x":9.489995,"y":11.199969,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-49_2","argument":"e-スポーツは家庭、シニアとの多世代間交流に活用できる","x":9.1171,"y":11.026071,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-49_3","argument":"e-スポーツは健常児と障がい児のインクルーシブ教育にも活用できる","x":9.358635,"y":11.168163,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-50_0","argument":"来年には1人1台PCが実現するべきである。","x":10.404659,"y":9.55625,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-50_1","argument":"子供たちが加古川を一層好きになるためのコンテンツが必要である。","x":7.3473763,"y":8.698605,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-50_2","argument":"シビックプライドを生むための取り組みが重要である。","x":9.324806,"y":11.832947,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-51_0","argument":"STEAM教育は重要である。","x":10.210729,"y":12.341577,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-51_1","argument":"加古川東高校は今年度から県の指定校としてSTEAM教育に取り組んでいる。","x":10.433982,"y":12.381737,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-52_0","argument":"卒業生進路相談会を開催し、遠方で働く社会人との相談ができるようにすべき。","x":9.34557,"y":10.393936,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-52_1","argument":"地域課題の解決提案を行い、課題探求型学習を活用して地域への愛着心を形成すべき。","x":10.030541,"y":12.211078,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-52_2","argument":"地域の伝統文化の保護、継承と情報発信にICTを活用すべき。","x":10.997955,"y":10.990249,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-53_0","argument":"東高はSTEAM教育に熱心に取り組んでいる","x":10.198786,"y":12.323446,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-53_1","argument":"中高連携で中学生とともに学ぶべき内容が多い","x":10.027333,"y":11.759714,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-53_2","argument":"加古川市の協同的探求学習とSTEAM教育は親和性が高い","x":10.402902,"y":12.13782,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-53_3","argument":"ICT導入は課題解決の手段であり、導入自体が目的になってはならない","x":11.25641,"y":10.729411,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-54_0","argument":"探Q!RESAS成果発表会が開催されることは重要である。","x":9.729175,"y":10.990533,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-54_1","argument":"加古川東高校や県立農業高校が11月29日に発表することは注目すべきである。","x":7.910462,"y":8.888373,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-55_0","argument":"RESASの活用は兵庫県、特に東播、北播地域が全国的に進んでいると思う。","x":9.604026,"y":10.7276745,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-55_1","argument":"地域の高校、大学と連携して市立の小学校、中学校でRESASを活用することが可能だと思う。","x":9.647302,"y":10.961808,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-56_0","argument":"ICTの導入は手段であって目的ではない","x":11.185496,"y":10.76977,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-56_1","argument":"教育へのスマホの活用やBYODのためには教員、生徒、保護者、地域の人々の意識を変える必要がある","x":8.468167,"y":11.270589,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-56_2","argument":"子どもたちに適切な情報リテラシーと情報活用技術を身につけさせるためには、教育現場でICT機器の活用方法を実践的に学ばせる必要がある","x":10.6529255,"y":11.218895,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-56_3","argument":"日本は授業でのICT活用が下位である事実を認識して取り組むべきである","x":10.710156,"y":11.367505,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"6.GIGAスクールの推進（デジタル教育）"},"url":null},{"arg_id":"Acsv-57_0","argument":"安否確認を行う方達の安全も考慮し、安否確認のデジタル化が必要である。","x":8.284961,"y":12.109441,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-57_1","argument":"無線で充電の減りが遅い（もしくは無い）機器を用いて、他の避難所と繋がれるシステムの開発が望ましい。","x":10.189913,"y":8.489163,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-58_0","argument":"防災情報システムの導入において、スマートフォンを情報媒介として用いる場合、連絡手段がなくなることが懸念される","x":10.685904,"y":7.6994286,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-58_1","argument":"市民に防災情報システムの存在を知ってもらうことが重要であり、そのための手段も考慮すべき","x":10.587551,"y":7.446955,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-59_0","argument":"「ARによる浸水被害の視覚化」の意味が分からない","x":10.673676,"y":6.9350986,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-59_1","argument":"浸水被害の状況を多くの人に知ってもらうためには、情報に簡単にアクセスできるようにすることが先決だと思う","x":10.716853,"y":7.342704,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-60_0","argument":"災害時には、市民からの情報が一斉に寄せられるため、緊急度の高いものに優先的に対応できるシステムが必要である。","x":10.842509,"y":7.40497,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-60_1","argument":"AIを活用した災害情報のトリアージ体制の構築が必要ではないか。","x":10.868055,"y":7.210958,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-62_0","argument":"津波から避難する際に、津波が来る場所や避難経路の目安になる看板が役立つ","x":9.997124,"y":6.8615737,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-62_1","argument":"非常時にはデジタルよりもアナログの情報が重要だと思う","x":8.682775,"y":12.454369,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-63_0","argument":"救援物資ステーションマップをハザードマップに書き込むべきである。","x":10.280011,"y":6.8052535,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-63_1","argument":"小学校で救援物資ステーションをハザードマップに書き込む宿題を出すことで、保護者を巻き込んで防災について話すきっかけになる。","x":10.386428,"y":6.879899,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-64_0","argument":"熊本市は九州北部豪雨の教訓から災害情報トリアージ体制を構築した","x":10.824909,"y":7.182328,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-64_1","argument":"熊本地震の際にトリアージ体制が機能した","x":10.856117,"y":7.0821466,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-65_0","argument":"ハザードマップを参考にして、具体的な住所におけるリスクを記載したチラシを郵送するのは良いアイデアである。","x":10.098297,"y":6.8534355,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-65_1","argument":"防災意識が低い方でも、具体的なリスク情報を得ることで災害に備えるための最低限の知識を得ることができる。","x":10.667779,"y":7.473164,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-66_0","argument":"チラシを受け取った人が一考してくれるか疑問である。","x":9.59785,"y":7.143735,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-66_1","argument":"与えられるのではなく自分で考えて動かないと覚えない。","x":10.189657,"y":10.915974,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-66_2","argument":"防災意識のある人に働きかける方がコスパが良いと思う。","x":10.474051,"y":7.2600155,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-66_3","argument":"加古川で町単位の避難訓練が実施されているか知らない。","x":8.088341,"y":8.261027,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-67_0","argument":"加古川市の防災コンセプトに合わない場合があるかもしれない","x":8.078674,"y":8.412688,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-67_1","argument":"具体的な例を出せず申し訳ない","x":10.017038,"y":9.65802,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-68_0","argument":"加古川市内から「自然災害伝承碑」を探し、昔の人の知恵や苦労をオープンデータとして蘇らせるべきである。","x":10.738566,"y":6.562482,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-68_1","argument":"市内の中学校や高校の生徒に手伝ってもらい、地元の歴史と災害について学ぶ機会を提供するべきである。","x":9.4963045,"y":10.793153,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-68_2","argument":"発見した「自然災害伝承碑」に対して、”歴史みつけたで賞”を作り、国土地理院に登録してもらう運動を市として行うべきである。","x":10.656309,"y":6.7655344,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-68_3","argument":"過去の伝承を新しい仕組みの中で活用することで、播磨地域や日本全体の良き手本になる可能性がある。","x":10.822187,"y":6.605169,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-68_4","argument":"加古川市の職員に対して、新しい取り組みに邁進するよう応援したい。","x":8.087384,"y":8.614495,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-69_0","argument":"自然災害伝承碑に関するアイデアは面白い","x":10.6595125,"y":6.651376,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-69_1","argument":"国土地理院が自然災害伝承碑を募集している","x":10.712422,"y":6.6547494,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-69_2","argument":"兵庫県内の自然災害伝承碑の分布と浸水想定区域、将来人口をQGISで重ねて分析した","x":10.627818,"y":6.579998,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-69_3","argument":"加古川流域は浸水想定区域が限られているが、過去の水害経験から考察が可能","x":10.311471,"y":6.5304384,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"3.災害に強いまちづくり"},"url":null},{"arg_id":"Acsv-70_0","argument":"ウェルピーポイント制度について、加盟店での買い物でもポイントがたまることを明記した方がわかりやすいと思う。","x":6.61319,"y":9.191908,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-71_0","argument":"ウェルピーポイント制度をもっと知ってもらい、活用してもらうための活動をするべきである。","x":6.6261153,"y":9.129968,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-71_1","argument":"ポイントを貯められる方法や使用場所を人々の目につきやすいところに表示することが重要である。","x":6.509226,"y":9.085671,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-71_2","argument":"ウェルピーポイントの活用は多くのメリットがあるので、幅広く普及すべきである。","x":6.5426183,"y":9.209438,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-72_0","argument":"地場商店のオンラインショップの立ち上げ支援は、新しいお店を知る機会が増え、売り上げが上がるため良いと思う。","x":5.823108,"y":8.226724,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-72_1","argument":"店舗とオンラインショップを並行にすることで人手不足や機器の得意不得意による差が出る可能性がある。","x":9.151497,"y":8.975834,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-73_0","argument":"スマート農業を導入しやすくすることで、農家を辞める人は少なくなると思う。","x":8.552073,"y":9.302979,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-73_1","argument":"後継ぎ不足は改善しないと思う。","x":9.551936,"y":8.606456,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-74_0","argument":"スマート農業の導入により、より少ない作業量で多くの収穫が得られるが、後継ぎや新規参入者がいないと農地や山林、港の賑わいが失われる。","x":8.607807,"y":9.241106,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-74_1","argument":"自動運転車を活用し、都市部での仕事とリモートワークを組み合わせ、農繁期にはみんなで農作業に取り組む未来を考えている。","x":7.624975,"y":7.0362296,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-74_2","argument":"農業に力を入れることで、住む場所や食べ物に困らず、気になる仕事が見つかるまで農業を続ける人が増えると、農林水産漁業が賑わいを取り戻す可能性がある。","x":8.369651,"y":9.069176,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-75_0","argument":"週の中で行き来するという考えはとても良いと思う","x":8.697159,"y":8.735881,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-75_1","argument":"セミナーや体験会を開催すれば沢山の人が来てくれると思う","x":8.943176,"y":9.562753,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-75_2","argument":"SNS上での宣伝により若者も興味を持ってくれると思う","x":8.547804,"y":10.735026,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-76_0","argument":"加古川市版の運動促進事業として、ウォーキング実績に応じてウェルピーポイントを進呈することが考えられる。","x":6.7265315,"y":8.809218,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-76_1","argument":"ウォーキングだけでなく、サイクリングなどの他の継続的なスポーツ活動にもポイントを付与する事業モデルが提案できる。","x":6.5990787,"y":8.63773,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-76_2","argument":"健康活動に対するインセンティブとして、保険料の減免や特典を受けられる生命保険の仕組みが有効である。","x":6.830763,"y":9.941397,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-77_0","argument":"スマート農業の体験会を開催するべきである。","x":8.699554,"y":9.3799095,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-77_1","argument":"参加を呼びかけるべきである。","x":7.2988153,"y":9.599343,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_0","argument":"寺家町商店街の活性化を望む声が多いが、モータリゼーションの影響でロードサイドショップがにぎわっている。","x":5.7871356,"y":8.249599,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_1","argument":"駅前商店街の活性化には市外からの観光客誘致が不可欠である。","x":5.8866763,"y":8.28734,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_2","argument":"加古川駅は新快速停車駅であり、大阪や神戸からの日帰り圏内にある地理的優位性がある。","x":7.3542843,"y":7.7834725,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_3","argument":"観光地としての魅力を創出するために、地場産業である靴下に注目すべきである。","x":5.02272,"y":7.8930244,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_4","argument":"靴下の高品質化やブランド化により付加価値をつけることが生き残る道である。","x":4.971752,"y":7.7924,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_5","argument":"寺家町商店街をソックスストリートとして、靴下アンテナショップを誘致するアイデアが面白い。","x":5.5481014,"y":8.127977,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_6","argument":"加古川の歴史的価値のある家屋をリフォームし、高機能な靴下ショップを並べることで新たな観光地を創出できる。","x":5.3026137,"y":8.04969,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-78_7","argument":"実現には多くの課題があるため、意見を聞かせてほしい。","x":9.344373,"y":9.612016,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_0","argument":"大阪や神戸の在住者が土日に日帰りで行ってみようと思える場所を創出することが必要である。","x":7.4425783,"y":8.250251,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_1","argument":"加古川マラソンのような大規模イベントは年1回の開催で中止になることが多く、経済効果が少ないため、隔週で1000人規模のマラソンイベントを開催するべきである。","x":6.7490187,"y":8.17194,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_2","argument":"マラソンイベントのスタートとゴールを商店街に設定し、参加者が飲食を楽しむことで経済効果を高めるべきである。","x":6.0302553,"y":8.361606,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_3","argument":"市内参加者には健康増進のためのウェルビーポイントを進呈し、メタボな市民を優先参加させることで健康レベルを向上させ、医療費削減につなげるべきである。","x":6.865937,"y":9.720677,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_4","argument":"主催企業と連携し、参加者からの納付金を市に還元する仕組みを作るべきである。","x":7.16444,"y":9.662282,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_5","argument":"ふるさと納税を活用してチケット販売や商店街の割引券を配布し、参加者にお得感を訴求するべきである。","x":6.8855243,"y":9.512772,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-79_6","argument":"商店街のオモテナシでゴールを演出し、参加者に感動を提供することが重要である。","x":5.9816475,"y":8.454262,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-80_0","argument":"市内参加者に健康増進ウェルビーポイントを進呈し、学生にはバイトで給水ポイントを提供するべき。","x":6.682457,"y":9.498272,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-80_1","argument":"メタボな市民を優先参加させ、健康レベルUPに応じて医療費削減のための健康賞をポイント還元するべき。","x":6.9179425,"y":9.845992,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-80_2","argument":"ウェルピーポイントの普及を進めるために、かこがわアプリとの連携を行い、スマホ決済を可能にするべき。","x":6.480038,"y":9.30499,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-80_3","argument":"具体的なバイタル数字の自己申告によるポイント還元は大きな目玉となる可能性がある。","x":10.205106,"y":9.413675,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-81_0","argument":"加古川産靴下の確たるブランディングが成功し、市内で広く売られるようになることを望む。","x":5.2859836,"y":7.928218,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-81_1","argument":"市民全体が市産靴下に誇りや興味を持てる取り組みを、市政レベルでも市民レベルでも行うべき。","x":5.0133085,"y":7.6890717,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-81_2","argument":"加古川産靴下に公式ロゴや審査制度が必要であり、市民から公募する公式ロゴデザインコンテストを行うことを提案する。","x":5.3414917,"y":7.6936884,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-81_3","argument":"靴下ブランディングや関心度向上に資するイベントを市と兵庫県靴下工業組合、市民有志が協力して行うべき。","x":5.126342,"y":7.8330073,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-82_0","argument":"地場産業の製品に正式なロゴをつけることに賛成である","x":5.456141,"y":7.7547417,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-82_1","argument":"ロゴを公募することで、加古川の皆さんに愛着が湧き、全国区になれば誇れるものになる","x":5.472141,"y":7.6974635,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-82_2","argument":"シビックプライドの向上につながると思う","x":9.226385,"y":11.657846,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-82_3","argument":"靴下のロゴから公募してみてはどうかと思った","x":5.186665,"y":7.6061525,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-83_0","argument":"加古川生まれの靴下が一目でわかるようにすることで、他県へのお土産や贈り物にしやすくなるべきである。","x":5.385214,"y":7.927998,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-83_1","argument":"加古川産のアイデンティティを確立し、市民が加古川靴下を好んで履く雰囲気を作ることが重要である。","x":5.2906284,"y":7.950212,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-83_2","argument":"靴下産業を盛り上げることは運動促進事業のアイデアとも親和性がある。","x":4.9578967,"y":7.778157,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-84_0","argument":"今治タオルのように加古川ソックスもブランドが確立されることを望む。","x":5.1413403,"y":7.8674073,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-84_1","argument":"寺家町活性化の前にヤマトヤシキで贈答用を売ることから始めるのは面白い。","x":5.785695,"y":8.285624,"p":0,"cluster_ids":["0","1_3","2_24"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-84_2","argument":"靴下は消耗品というイメージが強く、ユニクロのもので十分だと考えている。","x":4.8712296,"y":7.728002,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-84_3","argument":"靴下のブランド力向上にはデザインだけでなく、防臭性や発熱性などの技術的なメリットを加えるべき。","x":4.8118525,"y":7.8482456,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-84_4","argument":"靴下の穴が開きやすさを考慮し、サブスクリプション制を導入するのは面白いアイデア。","x":4.845125,"y":7.6387987,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-85_0","argument":"靴下のサブスクリプション制は面白いビジネスモデルであり、夢があると思う。","x":4.977382,"y":7.629979,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-85_1","argument":"市内の靴下メーカーが防臭や保温機能を充実させているが、その認知度が低いのが残念である。","x":4.858692,"y":7.686811,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-85_2","argument":"市民は加古川の靴下にもっと目を向け、親しむ必要がある。","x":5.257881,"y":7.810469,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-85_3","argument":"市が市民の靴下に対する関心を高める取り組みを行うことが望ましい。","x":5.0603213,"y":7.5183296,"p":0,"cluster_ids":["0","1_3","2_6"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-86_0","argument":"見守りカメラや見守りサービスの導入・活用は市民の安全に繋がるので、継続してほしい。","x":10.151245,"y":7.776543,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_1","argument":"交通事故多発地域を可視化するために、交通事故の発生しやすい地域を示したマップをホームページに掲載すべき。","x":9.918373,"y":6.713993,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_2","argument":"「ここ危険」といった貼り紙を貼ることが有効だと思う。","x":9.95452,"y":6.9504895,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_3","argument":"朝と夕方に交通事故が発生しやすいことから、交差点で立ち当番を増やしたり、学校の行事として講座を行うべき。","x":8.191542,"y":7.5229063,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_4","argument":"高齢者の事故対策としてカーブミラーやガードレール、路面表示を増やすことが重要。","x":7.281774,"y":10.688625,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_5","argument":"道路を渡るときに手を挙げる習慣を持つことが良い。","x":7.194429,"y":6.8997803,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-86_6","argument":"歩道がない道に白線を引いて歩道を作ることや、歩行者と自転車の通る場所を分けることが効果的。","x":7.1523647,"y":6.808822,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-87_0","argument":"加古川は運転が荒い。","x":7.496173,"y":7.556088,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-87_1","argument":"優先順位が歩行者ではなく車になっている。","x":7.2028036,"y":6.7717853,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-87_2","argument":"細道から出てくる車が一旦停止せずにトップスピードで出てくることがある。","x":7.840358,"y":6.745871,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-87_3","argument":"子供の頃の教育や慣習が影響しているため、運転マナーの改善が必要。","x":7.8107915,"y":7.214681,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-88_0","argument":"BLEタグの機能を拡張して航空機のTCASシステムのような機能を持たせることは難しいのかもしれない。","x":9.340897,"y":6.927936,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-88_1","argument":"BLEタグを利用して、車に装置を搭載し、近くにBLEタグが存在すると警告音を鳴らすことで歩行者と車の事故を抑制できると思う。","x":9.200601,"y":6.8136086,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"2.安全・安心のまちづくり"},"url":null},{"arg_id":"Acsv-89_0","argument":"乗り捨て可能なレンタサイクルの対象をしっかりと決める必要がある","x":7.5712485,"y":6.6362486,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-89_1","argument":"加古川市では大学生や観光客が少ないため、対象を精選する必要がある","x":7.6034055,"y":8.615395,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-89_2","argument":"郊外の商業施設への移動やウェルネスシティに関連したスポーツバイクでのサイクリングが考えられる","x":6.760639,"y":7.899577,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-89_3","argument":"加古川から円山川へのサイクリングルートを設定することで経済効果や外国人観光客の誘致につながる","x":6.984658,"y":7.856544,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-89_4","argument":"加古川のサイクリングルートはアワイチ、ビワイチ、しまなみ海道と並ぶ可能性がある","x":6.92632,"y":7.8789454,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-90_0","argument":"加古川から由良川へのサイクリングルートに訂正が必要である。","x":6.923021,"y":7.899787,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-91_0","argument":"かこバスの東加古川駅発着のコースを新設し、山陽電車の駅を中継地点に設定することで、東加古川駅付近の施設や飲食店の活性化が期待できる。","x":7.186172,"y":7.695692,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-91_1","argument":"かこバスの運行状況から渋滞情報を収集し、道路交通情報アプリを提供することや、AIを活用した信号機の遠隔操作による渋滞予防が有望である。","x":8.974489,"y":6.8161745,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-92_0","argument":"かこバスの運行状況や遅延状況をリアルタイムで確認できるアプリが必要である。","x":8.843507,"y":6.9724183,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-92_1","argument":"既存のアプリがある場合、バス停にQRコードを設置することが有効である。","x":8.734406,"y":6.780996,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-93_0","argument":"車がなくても生活できることは、自転車などでの移動が一般的となることを目指している。","x":7.5356717,"y":6.5758934,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-94_0","argument":"バスロケーションシステムはバスの利用にとても良いと思う。","x":8.332469,"y":6.577024,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-94_1","argument":"バスの到着時刻の予測を表示することができると便利だと思う。","x":8.672122,"y":6.6922255,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-94_2","argument":"バス停に上屋やベンチがないことは、特に足腰の弱い方にとって快適に利用できない状態である。","x":8.408285,"y":6.7095094,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-94_3","argument":"バス停にベンチを設置することが改善されれば、利用しやすくなると思う。","x":8.459698,"y":6.654525,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-95_0","argument":"加古川市の交通政策において、サイクリングをスポーツ施設への交通手段として活用すべきである。","x":6.967257,"y":7.876142,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-95_1","argument":"加古川市がウェルネス都市を掲げていることを踏まえ、サイクリングのメリットを考察する必要がある。","x":6.836134,"y":8.302517,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-95_2","argument":"ウェルピーポイントなどの既存のシステムを活用し、市と市民、企業を繋ぐ新たなシステムによってサイクリングを促進すべきである。","x":6.8212595,"y":9.210352,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-95_3","argument":"サイクリングの促進は「快適に移動できるまち」を実現するために重要である。","x":6.942086,"y":7.34525,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-96_0","argument":"URLを上手く載せられなかったので、再度載せ直す必要がある。","x":9.2897415,"y":8.057495,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-97_0","argument":"平坦な加古川では、自転車利用は重要である。","x":7.360368,"y":7.064239,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-97_1","argument":"乗り捨てに限定することなく、自転車利用を促進する環境づくりが必要である。","x":7.4700313,"y":6.5454187,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-97_2","argument":"加古川河川敷を含めたモデルルート山田錦の里ロングライドコースがあるので、走ってみて意見を聞かせてほしい。","x":7.083615,"y":7.8283596,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-98_0","argument":"加古川市の交通において、南北交通が貧弱であることが大きな問題である。","x":7.60814,"y":7.7246675,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-98_1","argument":"かこバスの本数を増やす案は費用対効果が有効ではない可能性がある。","x":8.584164,"y":6.6907754,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-98_2","argument":"自動運転技術の実用化を見据えた南北間の交通政策が必要である。","x":7.6579294,"y":7.144599,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-98_3","argument":"MaaSの観点から、スマホアプリを活用したオンデマンド移動の技術を早期に実用化するための準備が必要である。","x":7.7663307,"y":11.315177,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-99_0","argument":"自転車での移動は自動車と比べて圧倒的にエコであり、移動に技術が必要なく、価格も安価でかさばらないため、様々な良い点がある。","x":7.576681,"y":6.5645123,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-99_1","argument":"自転車は手軽であるが、管理が難しく、盗難や放棄されやすい。","x":7.5025697,"y":6.5005636,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-99_2","argument":"自転車にもナンバープレートをつけることが効果的だと思う。","x":7.6747108,"y":6.857079,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-100_0","argument":"田中さんの取組は素晴らしい","x":8.3882265,"y":9.06766,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-100_1","argument":"自転車を交通手段としてだけでなく、移動を楽しむことも必要","x":7.400256,"y":6.6248956,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-100_2","argument":"サイクリングやツーリングなどの楽しみ方がある","x":6.8232117,"y":7.6394963,"p":0,"cluster_ids":["0","1_3","2_1"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-100_3","argument":"来年2月に予定されているシクロクロスに参加することを提案する","x":8.792236,"y":9.857914,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-100_4","argument":"自転車の安全運転と自転車レーンの整備が必要","x":7.4266105,"y":6.639529,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-101_0","argument":"移動を楽しむことは公共交通の利用を推進する上で重要である。","x":7.61724,"y":6.508258,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-101_1","argument":"バスに乗ることで買い物割引が得られるなど、楽しさを提供する施策が必要である。","x":8.237012,"y":6.627203,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-101_2","argument":"加古川線に乗ることでカラオケや足湯などの楽しみがあり、乗りたくなる仕組みが重要である。","x":7.2088103,"y":7.7417974,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"1.快適に移動できるまち"},"url":null},{"arg_id":"Acsv-102_0","argument":"ドライブレコーダー等の解析による路面状況の把握や市公衆無線Wi-Fiの整備において、個人情報が流出する可能性があるのか懸念される。","x":10.396817,"y":8.319299,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-102_1","argument":"公衆無線Wi-Fiの危険性については十分に周知されていないため、整備と同時に周知にも力を入れる必要がある。","x":10.393114,"y":8.31039,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-103_0","argument":"市公用車のドライブレコーダー画像の利活用は、路面状況やお店の混み具合、人通りの多さ等の情報を加古川市の発展に繋げる可能性がある。","x":9.097179,"y":6.8597546,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-103_1","argument":"公衆無線Wi-Fiは、屋外での待ち合わせや電車に乗り遅れた時に使いたいケースがあるため、駅やバス停、待ち合わせ場所から整備することが望ましい。","x":10.192495,"y":8.401287,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-104_0","argument":"道がガタガタで自転車でスーパーへ行くと卵が割れてしまうため、卵を買うときは車でしか行けないのはありえない。","x":7.712689,"y":6.6542006,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-104_1","argument":"車道だけでなく、自転車道・歩道の整備を早くして欲しい。","x":7.171713,"y":6.7647085,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-105_0","argument":"歩道と車道の境目の段差が大きく、雨の日の自転車は転倒しやすい","x":7.2758183,"y":6.7242155,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-105_1","argument":"晴れの日は卵が割れるほどの段差がある","x":8.025452,"y":6.9859014,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-105_2","argument":"ベビーカーも押しにくい","x":7.786342,"y":6.5146847,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-105_3","argument":"子育てに手厚い市なら歩道の整備がされているべき","x":6.936547,"y":6.914764,"p":0,"cluster_ids":["0","1_3","2_9"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-105_4","argument":"明石市へ引っ越す気持ちが理解できる","x":8.017466,"y":9.667283,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-106_0","argument":"行き止まりが多くて困るので、「ここから先行き止まり」の看板が欲しい。","x":9.165685,"y":6.735137,"p":0,"cluster_ids":["0","1_5","2_17"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-106_1","argument":"ユニバーサルシティを目指すべき。","x":7.675807,"y":9.447237,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-107_0","argument":"学生はボランティアに参加できず、ウェルピーポイントが貯まらない。","x":6.563708,"y":9.522517,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-108_0","argument":"非協力的な市に対しては、他市のデータを利用する方法を考える必要がある。","x":11.033256,"y":8.821008,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-109_0","argument":"ICTを活用した都市機能の強化や都市課題の解決において、にぎわいのあるまちづくりに投稿する方が建設的な議論ができると思う。","x":10.463399,"y":10.393432,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-109_1","argument":"中高生がボランティアに参加することは重要であり、参加方法が分からない現状を改善する必要がある。","x":8.34123,"y":10.518104,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-109_2","argument":"加古川市内で学生対象に支援してもらいたい人と支援したい学生をマッチングさせる機能をかこがわアプリ内に実装することが面白い。","x":8.141645,"y":9.587623,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-110_0","argument":"政策検討と様々な大量データを結び付けるのは難しい","x":11.251735,"y":9.063616,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-110_1","argument":"サービスデザイン思考の活用が効果的である","x":9.903144,"y":10.0150385,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-110_2","argument":"持っているデータを機械学習で分析し、その結果を基に必要なデータや分析方法を考えるアプローチが効果的である","x":11.375504,"y":9.075931,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-111_0","argument":"「多様なデータ」には市民の生の声がもっと入るべきである。","x":11.309072,"y":8.548472,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-111_1","argument":"公共施設の利用者や小中学生の生徒など、直接アプローチできる団体に対して、利用のタイミングで気軽に意見収集できる仕組みが必要である。","x":9.605525,"y":9.343096,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-112_0","argument":"藤枝市は政策立案に向けたAI分析を行っている。","x":11.567709,"y":9.012475,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-112_1","argument":"市民アンケートの分析にAIを活用し、積極的な市民活動への参加や文化事業への関心を高める政策立案を支援している。","x":11.572506,"y":9.017906,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-112_2","argument":"アンケート結果を類似度の高いグループに分類し、同一グループの回答傾向を分析している。","x":11.540317,"y":9.093024,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-112_3","argument":"意見書などの自由投稿もAIで分析し、課題や取り組み事項を浮かび上がらせている。","x":11.503511,"y":9.178045,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-113_0","argument":"職員のITリテラシー向上に向けた教育が急務である","x":10.649873,"y":10.594629,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-114_0","argument":"スマート人材の育成は最も重要であり、民間からの講義だけでなく、連携も必要である。","x":10.343021,"y":10.275908,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-114_1","argument":"高齢者のデジタル利用推進が重要である。","x":7.91273,"y":11.710103,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-115_0","argument":"加古川市職員のIT能力向上を目指し、外部人材の登用が中長期の目標であるべき。","x":10.484451,"y":10.053167,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-115_1","argument":"市民のIT学習を支援するために、外部の優れた人材を活用する仕組みを作るべき。","x":10.430166,"y":10.068619,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-115_2","argument":"加古川市は、全国や全世界に向けて教えてくれる人を募集し、対価として名産品を提供することを検討すべき。","x":7.5293965,"y":8.759055,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-115_3","argument":"市民に基礎データを提供するために、AIデータ解析を活用することが有益である。","x":11.38454,"y":8.706508,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-115_4","argument":"加古川市は、IT活用の流れを作り、市民が自然に学べる環境を整えるべき。","x":7.954894,"y":8.78539,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-116_0","argument":"加古川市がスマートシティとして全国的に知名度を上げるためには、目立つ目玉的な項目が必要である。","x":7.6276603,"y":8.993258,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-116_1","argument":"見守りカメラの成果をより広報することとともに、第２第３の目玉政策が必要である。","x":10.411123,"y":7.8481045,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-116_2","argument":"行政内での取り組みよりも、よりキャッチーな分野での取り組みを進める必要がある。","x":10.96779,"y":9.587191,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-116_3","argument":"農牧業、製造業、観光業というICTの活用との親和性が高い項目が原案に含まれていないのは問題である。","x":11.129469,"y":10.771873,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-116_4","argument":"加古川市の先進的な取り組みが全国的なマスコミに報道されることを願っている。","x":7.7765727,"y":8.687552,"p":0,"cluster_ids":["0","1_3","2_14"],"attributes":{"root_title":"5.スマートシティ人材の育成"},"url":null},{"arg_id":"Acsv-117_0","argument":"市は企業と提携してプラットフォームを作成し、中小企業や病院に提供すべき","x":7.2709146,"y":9.905609,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"2.最新技術による徹底した業務効率化"},"url":null},{"arg_id":"Acsv-117_1","argument":"プラットフォームを通じて市の資金を得たり、病院のオンライン診療と業務効率化を図るべき","x":7.365867,"y":9.879607,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"2.最新技術による徹底した業務効率化"},"url":null},{"arg_id":"Acsv-117_2","argument":"コロナや少子高齢化による医療崩壊の防止に役立てるべき","x":7.4419293,"y":10.70029,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"2.最新技術による徹底した業務効率化"},"url":null},{"arg_id":"Acsv-118_0","argument":"公共施設へのWi-Fi導入を進めるべき","x":10.383813,"y":8.54951,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-118_1","argument":"平常時には市民にも公共施設のWi-Fiを利用させるべき","x":10.396239,"y":8.617702,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-118_2","argument":"会議室の使用にWi-Fi利用で使用料を徴収し、支払ったものにパスワードを通知するのが良い","x":10.190715,"y":8.685621,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-119_0","argument":"会議室の使用料を支払った方のみに使用許可の時間帯を設定し、ワンタイムパスワードを発行するのが良いのではないか。","x":10.029657,"y":8.80674,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-119_1","argument":"ロビー等を無償で開放する場合、利用時間を1回30分などに区切るのは良い考えである。","x":9.899382,"y":8.757341,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-119_2","argument":"何度でも利用できる場合、時間制限の必要性については疑問がある。","x":9.945671,"y":8.817382,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-120_0","argument":"30分区切りで運用されているのは、Wifiネットワークの悪用抑止策であると思われる。","x":10.265573,"y":8.570937,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-120_1","argument":"通信機器を隠して設置し、公共wifiを使用してファイル交換やマイニング等を行う可能性があるため、30分ごとの認証が行われているのではないか。","x":10.346122,"y":8.472906,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-121_0","argument":"無償提供するなら時間制限は必要である","x":10.089052,"y":8.846714,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-121_1","argument":"災害やコロナの影響で公共施設にWiFiを導入し、他の自治体の人がサテライトオフィスを利用する働き方が広がると良い","x":10.494886,"y":8.8844795,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-122_0","argument":"子育て世代は時間がないので、デジタル化が進むことに大歓迎である。","x":8.447074,"y":12.3249235,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-122_1","argument":"子どもが小さい時の予防接種や検診の管理がデジタル化されることで、利便性が高くなると思う。","x":8.200964,"y":12.07633,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-123_0","argument":"育児、家事、仕事などの情報を一括管理できるアプリが必要である。","x":8.805688,"y":7.8224473,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-123_1","argument":"加古川アプリで生活に関する情報を一括管理できるようになれば良い。","x":8.638418,"y":7.9128027,"p":0,"cluster_ids":["0","1_5","2_2"],"attributes":{"root_title":"4.安心して子育てをできるまちづくり"},"url":null},{"arg_id":"Acsv-124_0","argument":"高齢者にやさしいまちづくりの具体的な目指すべき姿について意見が分かれる","x":7.522675,"y":10.741264,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-124_1","argument":"高齢者のフレイル対策の取組みが参考になる","x":7.359825,"y":10.745625,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-124_2","argument":"フレイル対策の３本柱として栄養、運動、社会参加が推奨されている","x":7.1278615,"y":10.519178,"p":0,"cluster_ids":["0","1_1","2_21"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-124_3","argument":"ICT技術を使って個々のニーズや状況にあった形でフレイル対策を進めるべき","x":11.25689,"y":10.896615,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"5.高齢者にやさしいまちづくり"},"url":null},{"arg_id":"Acsv-125_0","argument":"ICTを活用した農業技術の次世代への継承に期待している。","x":10.985875,"y":11.05476,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-125_1","argument":"新型コロナの影響でテレワークを実施している企業が多く、通勤時間に農業を行い日中はテレワークをする人が増える可能性がある。","x":10.7897215,"y":9.767136,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-125_2","argument":"農業に興味がある働き盛り世代に加古川の農村部へ来てもらうチャンスがある。","x":8.15382,"y":8.946189,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-125_3","argument":"農作業をすることで健康になり、ウェルネス都市の推進につながる。","x":6.8569655,"y":9.316242,"p":0,"cluster_ids":["0","1_3","2_11"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-125_4","argument":"加古川が農業初心者でもICTを使って気軽に農業に参加できる町になってほしい。","x":8.258621,"y":9.11293,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-126_0","argument":"加古川市出身で、現在eMAFFの中の人をやっている。","x":7.9236474,"y":8.759274,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.にぎわいのあるまちづくり"},"url":null},{"arg_id":"Acsv-127_0","argument":"公共工事ではICTを活用して工期の短縮を図るべき","x":11.1050415,"y":10.1228285,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-127_1","argument":"安全対策を講じた上でICT工事の現場を子供達に見学させるのは面白い取り組みかもしれない","x":10.453372,"y":11.087111,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-128_0","argument":"ICT工事は人材不足の解消に効果がありそうである","x":11.056804,"y":10.246317,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-128_1","argument":"子どもたちへの見学会は未来を感じることができる良い取り組みである","x":9.9157915,"y":11.100159,"p":0,"cluster_ids":["0","1_2","2_12"],"attributes":{"root_title":"5.インフラの整備及びメンテナンス"},"url":null},{"arg_id":"Acsv-129_0","argument":"加古川市はデータを活用したまちづくりの先進事例として実践を期待したい。","x":8.006428,"y":8.673149,"p":0,"cluster_ids":["0","1_3","2_18"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-129_1","argument":"行政のデータだけでは不十分なので、民間企業のデータも活用する仕組みを検討すべき。","x":11.096676,"y":8.995098,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-129_2","argument":"民間企業のデータ提供が無償で受けられる可能性があるため、今がその取り組みを進める良い機会である。","x":10.916274,"y":8.826807,"p":0,"cluster_ids":["0","1_4","2_15"],"attributes":{"root_title":"4.多様なデータ利活用による新たなサービスの実現"},"url":null},{"arg_id":"Acsv-130_0","argument":"コロナの感染拡大をきっかけに市役所で行政事務のICT化やテレワークを進めるべき","x":10.933342,"y":9.959942,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-130_1","argument":"市役所で形骸化している無駄な仕事をICTを使って見極める改革を進めるべき","x":10.881899,"y":10.175964,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"3.どんな時も業務継続を可能とする体制づくり"},"url":null},{"arg_id":"Acsv-131_0","argument":"業務改善をしようとする意識、ICTを使えるスキル、関係者との調整する能力はどれも大事である。","x":11.007885,"y":10.5871935,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-131_1","argument":"調整する能力（コミュニケーション能力）の育成が一番難しいと感じる。","x":10.4614725,"y":10.71518,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-132_0","argument":"スマートシティアーキテクトという言葉になったことで距離感を感じる","x":7.834587,"y":9.578212,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-132_1","argument":"市民一人一人の大切な情報を使っているという意識を忘れないようにしてほしい","x":11.144821,"y":8.207635,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-133_0","argument":"自分の意見を文字にすることで、情報を伝えることの難しさを実感した","x":11.103844,"y":8.072957,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-133_1","argument":"スマートシティアーキテクトの方々が市民感覚やコスト意識を持って取り組むことを望む","x":7.7763605,"y":9.570083,"p":0,"cluster_ids":["0","1_1","2_3"],"attributes":{"root_title":"5.スマートシティアーキテクトの育成"},"url":null},{"arg_id":"Acsv-134_0","argument":"今後窓口での待ち時間は短くなり、予約システムを導入する必要はなくなると思う。","x":9.455762,"y":8.550761,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-134_1","argument":"施策への反映は、他のプロジェクトとも情報共有し、矛盾のないようにし、不必要な経費を使わないようにしてもらいたい。","x":10.857033,"y":8.417416,"p":0,"cluster_ids":["0","1_4","2_7"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-135_0","argument":"ヤマトヤシキの図書館の営業時間を土日祝日や夏休み、冬休み、春休み期間に午前八時頃からにするべきである。","x":8.920127,"y":8.620002,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-135_1","argument":"図書館の自習室は多くの人に幅広い時間に利用してもらう方向性で運営すべきである。","x":9.430198,"y":9.082166,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-135_2","argument":"営業時間の変更をお試し期間として設けてみるのは良いアイデアである。","x":9.890389,"y":8.804985,"p":0,"cluster_ids":["0","1_4","2_13"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-136_0","argument":"ITツール主導に陥らないように注意すべきである","x":11.1534605,"y":10.783909,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-136_1","argument":"本来の目的は論理思考力、創造力、問題解決能力である","x":10.417783,"y":11.761986,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-136_2","argument":"これからはコンテンツの議論をすべきである","x":9.643042,"y":10.054359,"p":0,"cluster_ids":["0","1_1","2_10"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-137_0","argument":"ICT人材が将来必要であることは確かだが、全てを機械化すると人との触れ合いが失われる可能性がある。","x":10.969854,"y":10.260315,"p":0,"cluster_ids":["0","1_2","2_20"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-137_1","argument":"小学生の低学年の子供たちにはタブレットの管理が難しいと思う。","x":8.82858,"y":11.709201,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-138_0","argument":"協同的探究学習に基づく授業づくりに取り組むべきである","x":10.156429,"y":11.823236,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-138_1","argument":"デジタルとアナログを融合させた教育が今の時代にあったものになることを望む","x":8.841182,"y":12.599202,"p":0,"cluster_ids":["0","1_2","2_4"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-139_0","argument":"加古川中学校ではICTを活用した授業の様子が公開されている。","x":10.706106,"y":11.376322,"p":0,"cluster_ids":["0","1_2","2_0"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-139_1","argument":"授業では論理思考力、創造力、問題解決能力が意識されているように感じる。","x":10.381277,"y":11.938254,"p":0,"cluster_ids":["0","1_2","2_16"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-140_0","argument":"養成講座を受けた人が講師をつとめるスマホ教室を開講することを企画すべきである。","x":8.401342,"y":11.138714,"p":0,"cluster_ids":["0","1_1","2_19"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-140_1","argument":"高齢者との接点が少ないため、スマホの使い方を教える機会が少ない。","x":7.6480856,"y":11.2163105,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-141_0","argument":"スマホを使える人やスマホ教室で学んだ人が困っている人を助けられる地域になると良いまちになると思う。","x":8.320827,"y":11.181652,"p":0,"cluster_ids":["0","1_1","2_8"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-142_0","argument":"「加古川市防災ポータル」が開設されることを確認したい。","x":10.195576,"y":7.2201786,"p":0,"cluster_ids":["0","1_5","2_5"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-143_0","argument":"建設中の神吉中津線、中津水足線、平野神野線の進捗を見せていただけるとイメージしやすい。","x":7.2841706,"y":7.6214037,"p":0,"cluster_ids":["0","1_3","2_22"],"attributes":{"root_title":"ログイン"},"url":null},{"arg_id":"Acsv-144_0","argument":"オンライン申請、予約、書かない窓口など、わかりやすい言葉でPRしている自治体がある。","x":9.6605015,"y":8.8691845,"p":0,"cluster_ids":["0","1_4","2_23"],"attributes":{"root_title":"ログイン"},"url":null}],"clusters":[{"level":0,"id":"0","label":"全体","takeaway":"","value":407,"parent":"","density_rank_percentile":0},{"level":1,"id":"1_5","label":"地域の安全と利便性を高めるための情報統合と交通施策の強化","takeaway":"加古川市におけるアプリや交通機関の利便性向上を目指し、地域住民が日常生活や防災に役立つ情報を一元管理できる仕組みの構築が求められています。具体的には、加古川アプリの機能強化やかこバスの運行状況のリアルタイム確認、交通安全施策の導入が提案されています。また、市民参加を促進するための防災情報の可視化や、地域の歴史を活かした取り組みも重要視されており、地域全体での安全意識の向上が期待されています。","value":55,"parent":"0","density_rank_percentile":0.4},{"level":1,"id":"1_4","label":"市民参加を促進するデジタル情報インフラの整備","takeaway":"市民に必要な情報を効果的に提供し、公共施設の利用をオンライン化することで、市民の利便性を向上させる取り組みが求められています。特に、見守りカメラや公衆Wi-Fiの導入により市民の安全を確保しつつ、情報の透明性を高めることが重要です。また、AIを活用したデータ分析を通じて政策立案の効率化を図り、市民の意見を反映させることで、より良い地域社会の実現を目指しています。","value":68,"parent":"0","density_rank_percentile":0.2},{"level":1,"id":"1_1","label":"世代間の協力による地域活性化と高齢者支援の強化","takeaway":"加古川市が目指すスマートシティの実現に向けて、高齢者に優しい施策や世代間連携を通じた子育て支援、転入者への手厚いサポートが重要視されています。具体的には、高齢者が便利さを実感できるICTサービスの提供や、シニア世代が子育て支援に参加することで健康促進を図る取り組みが提案されています。また、地域の魅力を高めるためのプロジェクトや、オンラインでのコミュニケーションを活用した地域コミュニティの活性化が求められています。これにより、地域全体のつながりを強化し、安心して暮らせる環境を整えることが期待されています。","value":68,"parent":"0","density_rank_percentile":0.6},{"level":1,"id":"1_3","label":"加古川市の交通・農業・観光を活かした地域活性化戦略","takeaway":"加古川市における交通インフラの改善、農業振興、観光資源の活用を通じて地域の活性化を図るための具体的な施策が提案されています。南北交通の強化や新たな交通手段の導入、ICTを活用した農業の振興、商店街の再生戦略などが中心となり、地域経済の活性化や住民の生活向上に寄与することが期待されています。また、健康促進や教育コンテンツの充実を通じて、加古川市の魅力を高める取り組みも重要視されています。","value":111,"parent":"0","density_rank_percentile":1},{"level":1,"id":"1_2","label":"ICT活用による教育と行政の効率化と地域貢献の推進","takeaway":"ICT技術の導入を通じて、行政業務の効率化や保育士の支援、教育環境の改善を図ることが求められています。特に、コロナ禍を契機にテレワークやデジタル教育の重要性が増しており、ICTを活用した協同学習や創造力の育成が地域課題の解決に寄与することが期待されています。また、ブルーライト対策や健康促進の取り組みを通じて、児童・生徒の学びの環境を整えることが重要視されています。全体として、ICTの効果的な活用が地域社会の発展に貢献することが強調されています。","value":105,"parent":"0","density_rank_percentile":0.8},{"level":2,"id":"2_2","label":"加古川アプリの利便性向上と多機能化の必要性","takeaway":"この意見グループは、加古川アプリの現状の利便性や機能に対する不満や改善点を中心に構成されています。特に、アプリが防災機能だけでなく、日常生活に役立つ情報を一括管理できるような魅力的な機能を持つことが求められています。また、アプリの利用促進には、通知機能や広報活動の強化が重要であるとの意見も見受けられます。","value":16,"parent":"1_5","density_rank_percentile":0.76},{"level":2,"id":"2_7","label":"市民情報共有の強化と安全性の確保","takeaway":"この意見グループは、市の施策を通じて市民に必要な情報を効果的に提供・共有することの重要性と、その過程での安全性やプライバシーの懸念に焦点を当てています。特に、見守りカメラや公衆無線Wi-Fiの導入においては、情報の透明性と市民の安全を確保するための施策が求められています。また、情報が届かない層への配慮や、技術革新に追いつかない市民へのサポートも重要な論点として挙げられています。","value":15,"parent":"1_4","density_rank_percentile":0.48},{"level":2,"id":"2_23","label":"公共施設のオンライン化と利用時間の拡充","takeaway":"この意見グループは、図書館やスポーツ施設、公民館などの公共施設における利用時間の拡充や、オンライン予約・決済システムの導入に関する要望が中心です。特に、図書館の自習室の利用時間を広げることや、スポーツ施設の予約をオンラインでスムーズに行えるようにすることが求められています。また、施設の老朽化や後継ぎ不足といった課題も指摘されており、全体的に利便性の向上を目指す意見が多く見受けられます。","value":19,"parent":"1_4","density_rank_percentile":0.52},{"level":2,"id":"2_17","label":"かこバスの利便性向上と交通安全施策","takeaway":"この意見グループは、かこバスの運行状況や渋滞情報のリアルタイム確認、バス停の快適性向上、交通安全のための技術導入など、バス利用者の利便性を高めるための具体的な施策に関する意見が中心です。特に、アプリの導入やBLEタグの活用、バス停の設備改善など、利用者の快適さと安全性を向上させるための提案が多く見られます。","value":15,"parent":"1_5","density_rank_percentile":0.4},{"level":2,"id":"2_5","label":"地域防災情報の可視化と市民参加の促進","takeaway":"この意見グループは、交通事故や自然災害に関する情報を可視化し、市民が容易にアクセスできるようにすることの重要性を強調しています。具体的には、ハザードマップや救援物資ステーションマップの作成、自然災害伝承碑の登録運動、災害時の情報トリアージ体制の構築など、市民の防災意識を高めるための具体的な施策が提案されています。また、地域の歴史や知恵を活かした取り組みも含まれており、地域全体での防災意識の向上を目指しています。","value":24,"parent":"1_5","density_rank_percentile":0.92},{"level":2,"id":"2_21","label":"高齢者に優しいスマートシティの実現に向けた施策","takeaway":"この意見グループは、加古川市が全世代に恩恵をもたらすスマートシティを目指す中で、高齢者向けの情報やサービスの提供、事故対策、ICTツールの活用促進、フレイル対策など、高齢者に特化した施策の重要性を強調しています。また、高齢者が便利さを実感できる仕組みや、医療崩壊防止に向けた取り組みも含まれており、具体的な目指すべき姿についての意見が交わされています。","value":13,"parent":"1_1","density_rank_percentile":0.24},{"level":2,"id":"2_19","label":"世代間連携による子育て支援と健康促進","takeaway":"この意見グループは、シニア世代が子育て支援に参加することを通じて、視力低下や寝付き・姿勢の悪化といった健康問題を解決することを目指しています。また、学生世代が興味を持つようなアプリの活用やSNSでの宣伝を通じて、世代間の連携を強化し、ボランティア参加の促進や教育機会の提供を提案しています。","value":7,"parent":"1_1","density_rank_percentile":0.64},{"level":2,"id":"2_3","label":"転入者支援と地域活性化のためのスマートシティ施策","takeaway":"この意見グループは、転入者に対する手厚いソフト面のサポートや、地域のニーズに基づいたプロジェクトの提案を通じて、地域の活性化を図ることに焦点を当てています。具体的には、転入者向けの安心・楽しい情報提供や、農業のスマート化を進めることで、地域の魅力を高め、住みやすい環境を整えることが重要視されています。また、コミュニティの形成やマッチングアプリの導入によって、地域内の人々のつながりを強化し、ファミリーサポートの利用促進や農業の後継者問題にも取り組む姿勢が見受けられます。","value":15,"parent":"1_1","density_rank_percentile":0.84},{"level":2,"id":"2_10","label":"地域コミュニティの活性化とオンライン支援の推進","takeaway":"この意見グループは、地域の既存の組織や公共施設を活用し、オンラインでの双方向コミュニケーションを通じて、地域住民や卒業生とのつながりを強化することに焦点を当てています。また、子育て世代やシニア層への支援を充実させるための具体的な提案や課題認識が共有されており、地域全体のコミュニティ活性化を目指す意見が中心です。","value":20,"parent":"1_1","density_rank_percentile":0.96},{"level":2,"id":"2_8","label":"世代間のデジタルディバイド解消とICT教育の推進","takeaway":"この意見グループは、スマートデバイスの普及とその活用に関するもので、特に高齢者と若者の間でのデジタルディバイドの解消に焦点を当てています。高齢者がスマホやタブレットを効果的に利用できるようにするためには、教育や意識改革が必要であり、具体的な支援策や地域の協力が求められています。また、世代ごとの異なるニーズに応じたICT教育の重要性も強調されています。","value":13,"parent":"1_1","density_rank_percentile":0.6},{"level":2,"id":"2_15","label":"AIとデータ活用による政策立案の効率化と市民参加の促進","takeaway":"この意見グループは、AIを活用したデータ分析を通じて、政策立案の効率化や市民の意見を反映させる重要性に焦点を当てています。特に、民間企業のデータや市民の生の声を取り入れることで、より効果的な政策を形成し、市民活動への参加を促進するアプローチが強調されています。また、データの鮮度や多様性の重要性、他市とのデータ共有の必要性についても言及されています。","value":14,"parent":"1_4","density_rank_percentile":0.28},{"level":2,"id":"2_22","label":"加古川市の交通インフラと地域活性化の課題","takeaway":"この意見グループは、加古川市における南北交通の貧弱さや、交通手段の多様化による地域の活性化の必要性に焦点を当てています。特に、加古川線の利用促進や新たなバスコースの設置、医療機関の偏在、観光資源の活用など、交通インフラの改善が地域経済や住民の生活に与える影響についての意見が集まっています。","value":9,"parent":"1_3","density_rank_percentile":0.08},{"level":2,"id":"2_20","label":"ICT導入による行政業務の効率化と保育士支援","takeaway":"この意見グループは、コロナ禍を契機に市役所でのICT化やテレワークの推進が必要であるという考えが中心です。特に、保育士の負担軽減や職員のITリテラシー向上、公共工事の効率化など、ICTを活用した業務改善や人材育成の重要性が強調されています。また、ICT導入による市民サービスの向上や、職員の対面接触の減少を通じた安全対策も議論されています。","value":20,"parent":"1_2","density_rank_percentile":0.56},{"level":2,"id":"2_0","label":"ICTを活用した協同学習と創造力育成の推進","takeaway":"この意見グループは、ICT技術を効果的に活用することで、協同的探求学習や創造力の育成を深化させる必要性を強調しています。具体的には、最先端のICTを用いた体験学習の機会提供や、地域の伝統文化の保護、情報リテラシーの向上、チームワーク力の育成など、多様な分野でのICT活用の重要性が述べられています。また、ICT導入が目的ではなく手段であることを認識し、個々のニーズに応じた教育方法の実践が求められています。","value":21,"parent":"1_2","density_rank_percentile":0.72},{"level":2,"id":"2_12","label":"教育環境の健康促進とデジタル活用の推進","takeaway":"この意見グループは、小学生や中学生の健康を守るためのブルーライト対策や、e-スポーツを通じた教育の質向上、地域との連携による学びのモデルの構築に焦点を当てています。特に、ブルーライトカットのメガネやフィルムの導入、オンライン講座の開催、RESASの活用など、デジタル技術を教育に取り入れることで、児童・生徒の健康と学びの環境を改善しようとする意見が多く見られます。","value":21,"parent":"1_2","density_rank_percentile":0.88},{"level":2,"id":"2_16","label":"STEAM教育を通じた地域課題解決と学びの深化","takeaway":"この意見グループは、STEAM教育の重要性とその地域課題解決への寄与に焦点を当てています。加古川東高校やGIGAスクールの取り組みを通じて、協同的探究学習や論理思考力、創造力、問題解決能力の育成が強調されており、地域全体での教育の質向上や学生の主体的な学びの促進が求められています。また、WROなどの国際的な教育プログラムを活用することで、学生の興味を引き出し、実践的なスキルを身につけることが期待されています。","value":21,"parent":"1_2","density_rank_percentile":0.44},{"level":2,"id":"2_13","label":"公共Wi-Fiとデジタルインフラの整備に関する提案","takeaway":"この意見グループは、公共施設におけるWi-Fiの導入や利用方法、デジタル機器の貸与に関する提案が中心です。特に、Wi-Fiの利用時間や料金、利用者の利便性向上に向けた具体的なアイデアが多く見られ、公共サービスのデジタル化を進めることの重要性が強調されています。また、災害時や特定の状況下でのWi-Fiの活用方法についても言及されており、地域社会のデジタルインフラの強化が求められています。","value":20,"parent":"1_4","density_rank_percentile":0.68},{"level":2,"id":"2_4","label":"デジタル教育の推進とその影響に関する多様な視点","takeaway":"この意見グループは、デジタル教育の導入とその利便性、学習方法の変化、そしてそれに伴う懸念点についての多様な視点が含まれています。デジタル化による利点としては、教材の軽量化や個別学習の促進が挙げられますが、一方で視力低下や学力差の拡大、アナログとの融合の必要性などの課題も指摘されています。全体として、デジタル教育の進展に対する期待と懸念が共存していることが特徴です。","value":22,"parent":"1_2","density_rank_percentile":1},{"level":2,"id":"2_18","label":"加古川市における農業振興とICT活用による地域活性化","takeaway":"この意見グループは、加古川市における農業の重要性とICTの活用を通じて地域を活性化させることに焦点を当てています。農業初心者が気軽に参加できる環境の整備や、データを活用したまちづくり、さらには地域の防災や見守りインフラの整備に対する期待が表れています。また、地域の教育機関や市民の新しい取り組みを応援する姿勢も見受けられ、加古川市の未来に対する前向きなビジョンが示されています。","value":15,"parent":"1_3","density_rank_percentile":0.32},{"level":2,"id":"2_14","label":"加古川市の魅力向上と教育コンテンツの充実","takeaway":"この意見グループは、加古川市が全国的な知名度を上げるために、名産品を通じた情報発信や、子供たちが楽しめるコンテンツの充実を求めています。また、教育を強化し、先進的な取り組みをマスコミに取り上げてもらうことで、加古川市の魅力を高めることが重要であると考えています。","value":7,"parent":"1_3","density_rank_percentile":0.16},{"level":2,"id":"2_11","label":"ウェルピーポイント制度による健康促進と地域活性化の推進","takeaway":"この意見グループは、ウェルピーポイント制度を活用して市民の健康を促進し、地域経済を活性化させるための具体的な施策に焦点を当てています。特に、メタボリックシンドロームの市民を優先参加させることで健康レベルを向上させ、医療費削減につなげるアイデアや、ポイント制度を通じて地域商店街や企業との連携を強化する提案が中心です。また、ウェルピーポイントの普及や活用方法の周知を通じて、地域全体の健康意識を高めることが重要視されています。","value":18,"parent":"1_3","density_rank_percentile":0.8},{"level":2,"id":"2_24","label":"観光客誘致と地域活性化のための商店街再生戦略","takeaway":"この意見グループは、駅前商店街の活性化に向けて観光客を誘致することの重要性を強調しています。マラソンイベントの活用や地元商店のオンラインショップ支援など、具体的な施策を通じて経済効果を高め、地域の魅力を引き出すアイデアが提案されています。また、商店街のオモテナシや新しい店舗の誘致により、地域全体の活性化を目指す姿勢が見受けられます。","value":7,"parent":"1_3","density_rank_percentile":0.04},{"level":2,"id":"2_9","label":"持続可能な移動手段と都市交通の未来","takeaway":"この意見グループは、自動運転車や自転車を活用した持続可能な移動手段の重要性を強調し、都市部における交通政策やインフラ整備の必要性について述べています。特に、歩道や自転車道の整備、公共交通の利用促進、子育て支援に関連する交通環境の改善が求められており、移動を楽しむことやエコな交通手段の普及が未来の都市生活において重要なテーマとなっています。","value":23,"parent":"1_3","density_rank_percentile":0.36},{"level":2,"id":"2_1","label":"加古川市におけるサイクリング促進とウェルネス都市の実現","takeaway":"この意見グループは、加古川市におけるサイクリングの重要性とその経済的・健康的なメリットに焦点を当てています。サイクリングを通じて快適な移動手段を提供し、観光客の誘致や地域経済の活性化を図ることが提案されています。また、定期的なマラソンイベントの開催やサイクリングルートの整備が、地域のウェルネス都市としての目標達成に寄与することが強調されています。","value":11,"parent":"1_3","density_rank_percentile":0.2},{"level":2,"id":"2_6","label":"加古川靴下ブランドの確立と地域活性化","takeaway":"この意見グループは、加古川の靴下産業に対する関心を高め、地域のアイデンティティを確立するための取り組みやアイデアが中心です。靴下を消耗品として捉えるだけでなく、高品質化やブランド化を進めることで付加価値をつけ、観光地としての魅力を創出することが提案されています。また、ロゴ公募やサブスクリプション制の導入など、市民参加型の施策が重要視されています。","value":21,"parent":"1_3","density_rank_percentile":0.12}],"comments":{},"propertyMap":{},"translations":{},"overview":"加古川市では、地域の安全性と利便性向上を目指し、情報統合や交通施策の強化が求められています。市民参加を促進するためのデジタルインフラ整備や、高齢者支援を含む世代間協力の重要性も強調されています。また、交通・農業・観光を活かした地域活性化戦略や、ICTを活用した教育・行政の効率化が地域の発展に寄与することが期待されています。","config":{"name":"88cacf8e-20a1-4a3c-8900-d0e5632d0799","input":"88cacf8e-20a1-4a3c-8900-d0e5632d0799","question":"加古川市スマートシティ構想に対する意見","intro":"加古川市版Decidimに寄せられたコメントを可視化\n分析対象となったデータの件数は144件で、これらのデータに対してOpenAI API (gpt-4o-mini)を用いて407件の意見（議論）を抽出し、クラスタリングを行った。\n","model":"gpt-4o-mini","provider":"openai","is_pubcom":true,"is_embedded_at_local":false,"local_llm_address":null,"extraction":{"prompt":"あなたは専門的なリサーチアシスタントです。与えられたテキストから、意見を抽出して整理してください。\n\n# 指示\n* 入出力の例に記載したような形式で文字列のリストを返してください\n  * 必要な場合は2つの別個の意見に分割してください。多くの場合は1つの議論にまとめる方が望ましいです。\n* 整理した意見は日本語で出力してください\n\n## 入出力の例\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\"\n  ]\n}\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、市民を教育する必要がある。また、教育できる人材を養成する必要がある。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIの能力、限界、倫理的考慮事項について、市民を教育すべき\",\n    \"AIに関する教育をできる人材を養成すべき\"\n  ]\n}\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIはエネルギーグリッドを最適化して炭素排出を削減できる\"\n  ]\n}\n","workers":30,"limit":144,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$17","model":"gpt-4o-mini"},"hierarchical_clustering":{"cluster_nums":[5,25],"source_code":"$18"},"hierarchical_initial_labelling":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説し、表札（label）をつけてください。\n表札については、グループ内の具体的な論点や特徴を反映した、具体性の高い名称を考案してください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n\n# サンプルの入出力\n## 入力例\n- 手作業での意見分析は時間がかかりすぎる。AIで効率化できると嬉しい\n- 今のやり方だと分析に工数がかかりすぎるけど、AIならコストをかけずに分析できそう\n- AIが自動で意見を整理してくれると楽になって嬉しい\n\n\n## 出力例\n{\n    \"label\": \"AIによる業務効率の大幅向上とコスト効率化\",\n    \"description\": \"この意見グループは、従来の手作業による意見分析と比較して、AIによる自動化で分析プロセスが効率化され、作業時間の短縮や運用コストの効率化が実現される点に対する前向きな評価が中心です。\"\n}\n","sampling_num":30,"workers":30,"source_code":"$19","model":"gpt-4o-mini"},"hierarchical_merge_labelling":{"prompt":"あなたはデータ分析のエキスパートです。\n現在、テキストデータの階層クラスタリングを行っています。\n下層のクラスタ（意見グループ）のタイトルと説明、およびそれらのクラスタが所属する上層のクラスタのテキストのサンプルを与えるので、上層のクラスタのタイトルと説明を作成してください。\n\n# 指示\n- 統合後のクラスタ名は、統合前のクラスタ名称をそのまま引用せず、内容に基づいた新たな名称にしてください。\n- タイトルには、具体的な事象・行動（例：地域ごとの迅速対応、復興計画の着実な進展、効果的な情報共有・地域協力など）を含めてください\n  - 可能な限り具体的な表現を用いるようにし、抽象的な表現は避けてください\n    - 「多様な意見」などの抽象的な表現は避けてください\n- 出力例に示したJSON形式で出力してください\n\n\n# サンプルの入出力\n## 入力例\n- 「顧客フィードバックの自動集約」: この意見グループは、SNSやオンラインレビューなどから集めた大量の意見をAIが瞬時に解析し、企業が市場のトレンドや顧客の要望を即時に把握できる点についての期待を示しています。\n- 「AIによる業務効率の大幅向上とコスト効率化」: この意見グループは、従来の手作業による意見分析と比較して、AIによる自動化で分析プロセスが効率化され、作業時間の短縮や運用コストの効率化が実現される点に対する前向きな評価が中心です。\n\n## 出力例\n{\n    \"label\": \"AI技術の導入による意見分析の効率化への期待\",\n    \"description\": \"大量の意見やフィードバックから迅速に洞察を抽出できるため、企業や自治体が消費者や市民の声を的確に把握し、戦略的な意思決定やサービス改善が可能になります。また、従来の手法と比べて作業負荷が軽減され、業務効率の向上やコスト削減といった実際の便益が得られると期待されています。\"\n}\n","sampling_num":30,"workers":30,"source_code":"$1a","model":"gpt-4o-mini"},"hierarchical_overview":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢の意見グループを分析し始めています。\nこれから意見グループのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$1b","model":"gpt-4o-mini"},"hierarchical_aggregation":{"sampling_num":30,"hidden_properties":{},"source_code":"$1c"},"enable_source_link":false,"output_dir":"88cacf8e-20a1-4a3c-8900-d0e5632d0799","skip-interaction":true,"without-html":true,"embedding":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n    is_embedded_at_local = config[\"is_embedded_at_local\"]\n    # print(\"start embedding\")\n    # print(f\"embedding model: {model}, is_embedded_at_local: {is_embedded_at_local}\")\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model, is_embedded_at_local, config[\"provider\"])\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"},"hierarchical_visualization":{"replacements":[],"source_code":"import subprocess\n\n\ndef hierarchical_visualization(config):\n    output_dir = config[\"output_dir\"]\n    cwd = \"../report\"\n    command = f\"REPORT={output_dir} npm run build\"\n\n    try:\n        process = subprocess.Popen(\n            command,\n            shell=True,\n            cwd=cwd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        while True:\n            output_line = process.stdout.readline()\n            if output_line == \"\" and process.poll() is not None:\n                break\n            if output_line:\n                print(output_line.strip())\n        process.wait()\n        errors = process.stderr.read()\n        if errors:\n            print(\"Errors:\")\n            print(errors)\n    except subprocess.CalledProcessError as e:\n        print(\"Error: \", e)\n"},"plan":[{"step":"extraction","run":true,"reason":"not trace of previous run"},{"step":"embedding","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_clustering","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_initial_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_merge_labelling","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_overview","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_aggregation","run":true,"reason":"not trace of previous run"},{"step":"hierarchical_visualization","run":false,"reason":"skipping html output"}],"status":"running","start_time":"2025-09-17T06:00:50.507012","completed_jobs":[{"step":"extraction","completed":"2025-09-17T06:01:18.327104","duration":27.817296,"params":{"prompt":"あなたは専門的なリサーチアシスタントです。与えられたテキストから、意見を抽出して整理してください。\n\n# 指示\n* 入出力の例に記載したような形式で文字列のリストを返してください\n  * 必要な場合は2つの別個の意見に分割してください。多くの場合は1つの議論にまとめる方が望ましいです。\n* 整理した意見は日本語で出力してください\n\n## 入出力の例\n/human\n\nAIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIテクノロジーは、そのライフサイクル全体における環境負荷を削減することに焦点を当てて開発されるべきです。\"\n  ]\n}\n\n/human\n\nAIの能力、限界、倫理的考慮事項について、市民を教育する必要がある。また、教育できる人材を養成する必要がある。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIの能力、限界、倫理的考慮事項について、市民を教育すべき\",\n    \"AIに関する教育をできる人材を養成すべき\"\n  ]\n}\n\n/human\n\nAIはエネルギーグリッドを最適化し、無駄や炭素排出を削減できます。\n\n/ai\n\n{\n  \"extractedOpinionList\": [\n    \"AIはエネルギーグリッドを最適化して炭素排出を削減できる\"\n  ]\n}\n","workers":30,"limit":144,"properties":[],"categories":{},"category_batch_size":5,"source_code":"$1d","model":"gpt-4o-mini"},"token_usage":109072},{"step":"embedding","completed":"2025-09-17T06:01:20.771969","duration":2.44274,"params":{"model":"text-embedding-3-small","source_code":"import pandas as pd\nfrom tqdm import tqdm\n\nfrom services.llm import request_to_embed\n\n\ndef embedding(config):\n    model = config[\"embedding\"][\"model\"]\n    is_embedded_at_local = config[\"is_embedded_at_local\"]\n    # print(\"start embedding\")\n    # print(f\"embedding model: {model}, is_embedded_at_local: {is_embedded_at_local}\")\n\n    dataset = config[\"output_dir\"]\n    path = f\"outputs/{dataset}/embeddings.pkl\"\n    arguments = pd.read_csv(f\"outputs/{dataset}/args.csv\", usecols=[\"arg-id\", \"argument\"])\n    embeddings = []\n    batch_size = 1000\n    for i in tqdm(range(0, len(arguments), batch_size)):\n        args = arguments[\"argument\"].tolist()[i : i + batch_size]\n        embeds = request_to_embed(args, model, is_embedded_at_local, config[\"provider\"])\n        embeddings.extend(embeds)\n    df = pd.DataFrame([{\"arg-id\": arguments.iloc[i][\"arg-id\"], \"embedding\": e} for i, e in enumerate(embeddings)])\n    df.to_pickle(path)\n"},"token_usage":0},{"step":"hierarchical_clustering","completed":"2025-09-17T06:01:27.290925","duration":6.51762,"params":{"cluster_nums":[5,25],"source_code":"$1e"},"token_usage":0},{"step":"hierarchical_initial_labelling","completed":"2025-09-17T06:01:32.070675","duration":4.777569,"params":{"prompt":"あなたはKJ法が得意なデータ分析者です。userのinputはグループに集まったラベルです。なぜそのラベルが一つのグループであるか解説し、表札（label）をつけてください。\n表札については、グループ内の具体的な論点や特徴を反映した、具体性の高い名称を考案してください。\n出力はJSONとし、フォーマットは以下のサンプルを参考にしてください。\n\n\n# サンプルの入出力\n## 入力例\n- 手作業での意見分析は時間がかかりすぎる。AIで効率化できると嬉しい\n- 今のやり方だと分析に工数がかかりすぎるけど、AIならコストをかけずに分析できそう\n- AIが自動で意見を整理してくれると楽になって嬉しい\n\n\n## 出力例\n{\n    \"label\": \"AIによる業務効率の大幅向上とコスト効率化\",\n    \"description\": \"この意見グループは、従来の手作業による意見分析と比較して、AIによる自動化で分析プロセスが効率化され、作業時間の短縮や運用コストの効率化が実現される点に対する前向きな評価が中心です。\"\n}\n","sampling_num":30,"workers":30,"source_code":"$1f","model":"gpt-4o-mini"},"token_usage":29518},{"step":"hierarchical_merge_labelling","completed":"2025-09-17T06:01:37.377805","duration":5.304589,"params":{"prompt":"あなたはデータ分析のエキスパートです。\n現在、テキストデータの階層クラスタリングを行っています。\n下層のクラスタ（意見グループ）のタイトルと説明、およびそれらのクラスタが所属する上層のクラスタのテキストのサンプルを与えるので、上層のクラスタのタイトルと説明を作成してください。\n\n# 指示\n- 統合後のクラスタ名は、統合前のクラスタ名称をそのまま引用せず、内容に基づいた新たな名称にしてください。\n- タイトルには、具体的な事象・行動（例：地域ごとの迅速対応、復興計画の着実な進展、効果的な情報共有・地域協力など）を含めてください\n  - 可能な限り具体的な表現を用いるようにし、抽象的な表現は避けてください\n    - 「多様な意見」などの抽象的な表現は避けてください\n- 出力例に示したJSON形式で出力してください\n\n\n# サンプルの入出力\n## 入力例\n- 「顧客フィードバックの自動集約」: この意見グループは、SNSやオンラインレビューなどから集めた大量の意見をAIが瞬時に解析し、企業が市場のトレンドや顧客の要望を即時に把握できる点についての期待を示しています。\n- 「AIによる業務効率の大幅向上とコスト効率化」: この意見グループは、従来の手作業による意見分析と比較して、AIによる自動化で分析プロセスが効率化され、作業時間の短縮や運用コストの効率化が実現される点に対する前向きな評価が中心です。\n\n## 出力例\n{\n    \"label\": \"AI技術の導入による意見分析の効率化への期待\",\n    \"description\": \"大量の意見やフィードバックから迅速に洞察を抽出できるため、企業や自治体が消費者や市民の声を的確に把握し、戦略的な意思決定やサービス改善が可能になります。また、従来の手法と比べて作業負荷が軽減され、業務効率の向上やコスト削減といった実際の便益が得られると期待されています。\"\n}\n","sampling_num":30,"workers":30,"source_code":"$20","model":"gpt-4o-mini"},"token_usage":13427},{"step":"hierarchical_overview","completed":"2025-09-17T06:01:40.416941","duration":3.036226,"params":{"prompt":"/system \n\nあなたはシンクタンクで働く専門のリサーチアシスタントです。\nチームは特定のテーマに関してパブリック・コンサルテーションを実施し、異なる選択肢の意見グループを分析し始めています。\nこれから意見グループのリストとその簡単な分析が提供されます。\nあなたの仕事は、調査結果の簡潔な要約を返すことです。要約は非常に簡潔に（最大で1段落、最大4文）まとめ、無意味な言葉を避けてください。\n出力は日本語で行ってください。\n","source_code":"$21","model":"gpt-4o-mini"},"token_usage":1314}],"total_token_usage":153331,"token_usage_input":134479,"token_usage_output":18852,"lock_until":"2025-09-17T06:06:40.420391","current_job":"hierarchical_aggregation","current_job_started":"2025-09-17T06:01:40.420378","estimated_cost":0.03148305,"current_job_progress":null,"current_jop_tasks":null},"comment_num":144,"visibility":"public"}}],["$","$L22",null,{"result":"$8:0:props:children:2:props:result"}],["$","$L12",null,{"w":"fit-content","mx":"auto","children":["$","$L6",null,{"href":"/","children":["$","$L7",null,{"variant":"outline","size":"md","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-chevron-left","children":[["$","path","1wnfg3",{"d":"m15 18-6-6 6-6"}],"$undefined"]}],"一覧へ戻る"]}]}]}],["$","$L23",null,{"my":12,"maxW":"750px","mx":"auto"}],["$","$L12",null,{"maxW":"750px","mx":"auto","mb":24,"children":"$L24"}]]}],["$","$L25",null,{"meta":{"reporter":"一般社団法人コード・フォー・ジャパン","message":"ともに考え、ともにつくる社会をビジョンに、Decidimの日本での活用などデジタル民主主義を推進しています。","webLink":"https://www.code4japan.org/","privacyLink":"https://www.code4japan.org/privacy-policy","termsLink":null,"brandColor":"#2577B1","isDefault":false}}]]
26:I[81499,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"ReporterContent"]
24:["$","$L26",null,{"meta":"$8:1:props:meta","children":"$L27"}]
28:I[89248,["150","static/chunks/59650de3-481cc0c44db376d7.js","315","static/chunks/315-19ca0205aa2fdd55.js","567","static/chunks/567-13e48369edb584ec.js","458","static/chunks/458-4db2abcd82f4c9c6.js","874","static/chunks/874-e31c245f344a6bb3.js","124","static/chunks/124-8b6d8ff5759d10e8.js","657","static/chunks/657-cbebd339d3ad99f2.js","81","static/chunks/81-bd2635f93f5b2f66.js","15","static/chunks/15-672a23ff45b4addd.js","609","static/chunks/609-1a2e7b76a004dfb5.js","182","static/chunks/app/%5Bslug%5D/page-1027ba582ddfc0a9.js"],"Image"]
27:["$","$L28",null,{"src":"/meta/reporter.png","alt":"一般社団法人コード・フォー・ジャパン","maxW":"150px"}]
b:null
f:[["$","title","0",{"children":"加古川市スマートシティ構想に対する意見 - 一般社団法人コード・フォー・ジャパン"}],["$","meta","1",{"name":"description","content":"加古川市では、地域の安全性と利便性向上を目指し、情報統合や交通施策の強化が求められています。市民参加を促進するためのデジタルインフラ整備や、高齢者支援を含む世代間協力の重要性も強調されています。また、交通・農業・観光を活かした地域活性化戦略や、ICTを活用した教育・行政の効率化が地域の発展に寄与することが期待されています。"}],["$","meta","2",{"property":"og:title","content":"加古川市スマートシティ構想に対する意見 - 一般社団法人コード・フォー・ジャパン"}],["$","meta","3",{"property":"og:description","content":"加古川市では、地域の安全性と利便性向上を目指し、情報統合や交通施策の強化が求められています。市民参加を促進するためのデジタルインフラ整備や、高齢者支援を含む世代間協力の重要性も強調されています。また、交通・農業・観光を活かした地域活性化戦略や、ICTを活用した教育・行政の効率化が地域の発展に寄与することが期待されています。"}],["$","meta","4",{"property":"og:image","content":"http://localhost:3000/88cacf8e-20a1-4a3c-8900-d0e5632d0799/opengraph-image.png"}],["$","meta","5",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","6",{"name":"twitter:title","content":"加古川市スマートシティ構想に対する意見 - 一般社団法人コード・フォー・ジャパン"}],["$","meta","7",{"name":"twitter:description","content":"加古川市では、地域の安全性と利便性向上を目指し、情報統合や交通施策の強化が求められています。市民参加を促進するためのデジタルインフラ整備や、高齢者支援を含む世代間協力の重要性も強調されています。また、交通・農業・観光を活かした地域活性化戦略や、ICTを活用した教育・行政の効率化が地域の発展に寄与することが期待されています。"}],["$","meta","8",{"name":"twitter:image","content":"http://localhost:3000/88cacf8e-20a1-4a3c-8900-d0e5632d0799/opengraph-image.png"}]]
